/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ControlsPolicyFilterConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsPolicyFilterConfig{}

// ControlsPolicyFilterConfig struct for ControlsPolicyFilterConfig
type ControlsPolicyFilterConfig struct {
	EventType string `json:"event_type"`
	Hash string `json:"hash"`
	Matcher map[string]interface{} `json:"matcher"`
}

// NewControlsPolicyFilterConfig instantiates a new ControlsPolicyFilterConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsPolicyFilterConfig(eventType string, hash string, matcher map[string]interface{}) *ControlsPolicyFilterConfig {
	this := ControlsPolicyFilterConfig{}
	this.EventType = eventType
	this.Hash = hash
	this.Matcher = matcher
	return &this
}

// NewControlsPolicyFilterConfigWithDefaults instantiates a new ControlsPolicyFilterConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsPolicyFilterConfigWithDefaults() *ControlsPolicyFilterConfig {
	this := ControlsPolicyFilterConfig{}
	return &this
}

// GetEventType returns the EventType field value
func (o *ControlsPolicyFilterConfig) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *ControlsPolicyFilterConfig) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *ControlsPolicyFilterConfig) SetEventType(v string) {
	o.EventType = v
}

// GetHash returns the Hash field value
func (o *ControlsPolicyFilterConfig) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *ControlsPolicyFilterConfig) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *ControlsPolicyFilterConfig) SetHash(v string) {
	o.Hash = v
}

// GetMatcher returns the Matcher field value
func (o *ControlsPolicyFilterConfig) GetMatcher() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Matcher
}

// GetMatcherOk returns a tuple with the Matcher field value
// and a boolean to check if the value has been set.
func (o *ControlsPolicyFilterConfig) GetMatcherOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Matcher, true
}

// SetMatcher sets field value
func (o *ControlsPolicyFilterConfig) SetMatcher(v map[string]interface{}) {
	o.Matcher = v
}

func (o ControlsPolicyFilterConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsPolicyFilterConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_type"] = o.EventType
	toSerialize["hash"] = o.Hash
	toSerialize["matcher"] = o.Matcher
	return toSerialize, nil
}

type NullableControlsPolicyFilterConfig struct {
	value *ControlsPolicyFilterConfig
	isSet bool
}

func (v NullableControlsPolicyFilterConfig) Get() *ControlsPolicyFilterConfig {
	return v.value
}

func (v *NullableControlsPolicyFilterConfig) Set(val *ControlsPolicyFilterConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsPolicyFilterConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsPolicyFilterConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsPolicyFilterConfig(val *ControlsPolicyFilterConfig) *NullableControlsPolicyFilterConfig {
	return &NullableControlsPolicyFilterConfig{value: val, isSet: true}
}

func (v NullableControlsPolicyFilterConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsPolicyFilterConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


