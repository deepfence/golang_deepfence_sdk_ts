/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v2.4.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ControlsPolicyFilterConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsPolicyFilterConfig{}

// ControlsPolicyFilterConfig struct for ControlsPolicyFilterConfig
type ControlsPolicyFilterConfig struct {
	EnablePolicyLogs *bool `json:"enable_policy_logs,omitempty"`
	IgnoredRemoteHosts []string `json:"ignored_remote_hosts,omitempty"`
	IgnoredRemoteIps []string `json:"ignored_remote_ips"`
	NodeId string `json:"node_id"`
	Policies []ControlsNetworkPolicy `json:"policies"`
	UpdatedAt int64 `json:"updated_at"`
	UseWaf bool `json:"use_waf"`
}

type _ControlsPolicyFilterConfig ControlsPolicyFilterConfig

// NewControlsPolicyFilterConfig instantiates a new ControlsPolicyFilterConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsPolicyFilterConfig(ignoredRemoteIps []string, nodeId string, policies []ControlsNetworkPolicy, updatedAt int64, useWaf bool) *ControlsPolicyFilterConfig {
	this := ControlsPolicyFilterConfig{}
	this.IgnoredRemoteIps = ignoredRemoteIps
	this.NodeId = nodeId
	this.Policies = policies
	this.UpdatedAt = updatedAt
	this.UseWaf = useWaf
	return &this
}

// NewControlsPolicyFilterConfigWithDefaults instantiates a new ControlsPolicyFilterConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsPolicyFilterConfigWithDefaults() *ControlsPolicyFilterConfig {
	this := ControlsPolicyFilterConfig{}
	return &this
}

// GetEnablePolicyLogs returns the EnablePolicyLogs field value if set, zero value otherwise.
func (o *ControlsPolicyFilterConfig) GetEnablePolicyLogs() bool {
	if o == nil || IsNil(o.EnablePolicyLogs) {
		var ret bool
		return ret
	}
	return *o.EnablePolicyLogs
}

// GetEnablePolicyLogsOk returns a tuple with the EnablePolicyLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsPolicyFilterConfig) GetEnablePolicyLogsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePolicyLogs) {
		return nil, false
	}
	return o.EnablePolicyLogs, true
}

// HasEnablePolicyLogs returns a boolean if a field has been set.
func (o *ControlsPolicyFilterConfig) HasEnablePolicyLogs() bool {
	if o != nil && !IsNil(o.EnablePolicyLogs) {
		return true
	}

	return false
}

// SetEnablePolicyLogs gets a reference to the given bool and assigns it to the EnablePolicyLogs field.
func (o *ControlsPolicyFilterConfig) SetEnablePolicyLogs(v bool) {
	o.EnablePolicyLogs = &v
}

// GetIgnoredRemoteHosts returns the IgnoredRemoteHosts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ControlsPolicyFilterConfig) GetIgnoredRemoteHosts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IgnoredRemoteHosts
}

// GetIgnoredRemoteHostsOk returns a tuple with the IgnoredRemoteHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsPolicyFilterConfig) GetIgnoredRemoteHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredRemoteHosts) {
		return nil, false
	}
	return o.IgnoredRemoteHosts, true
}

// HasIgnoredRemoteHosts returns a boolean if a field has been set.
func (o *ControlsPolicyFilterConfig) HasIgnoredRemoteHosts() bool {
	if o != nil && !IsNil(o.IgnoredRemoteHosts) {
		return true
	}

	return false
}

// SetIgnoredRemoteHosts gets a reference to the given []string and assigns it to the IgnoredRemoteHosts field.
func (o *ControlsPolicyFilterConfig) SetIgnoredRemoteHosts(v []string) {
	o.IgnoredRemoteHosts = v
}

// GetIgnoredRemoteIps returns the IgnoredRemoteIps field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ControlsPolicyFilterConfig) GetIgnoredRemoteIps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IgnoredRemoteIps
}

// GetIgnoredRemoteIpsOk returns a tuple with the IgnoredRemoteIps field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsPolicyFilterConfig) GetIgnoredRemoteIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredRemoteIps) {
		return nil, false
	}
	return o.IgnoredRemoteIps, true
}

// SetIgnoredRemoteIps sets field value
func (o *ControlsPolicyFilterConfig) SetIgnoredRemoteIps(v []string) {
	o.IgnoredRemoteIps = v
}

// GetNodeId returns the NodeId field value
func (o *ControlsPolicyFilterConfig) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *ControlsPolicyFilterConfig) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *ControlsPolicyFilterConfig) SetNodeId(v string) {
	o.NodeId = v
}

// GetPolicies returns the Policies field value
// If the value is explicit nil, the zero value for []ControlsNetworkPolicy will be returned
func (o *ControlsPolicyFilterConfig) GetPolicies() []ControlsNetworkPolicy {
	if o == nil {
		var ret []ControlsNetworkPolicy
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsPolicyFilterConfig) GetPoliciesOk() ([]ControlsNetworkPolicy, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// SetPolicies sets field value
func (o *ControlsPolicyFilterConfig) SetPolicies(v []ControlsNetworkPolicy) {
	o.Policies = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ControlsPolicyFilterConfig) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ControlsPolicyFilterConfig) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ControlsPolicyFilterConfig) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetUseWaf returns the UseWaf field value
func (o *ControlsPolicyFilterConfig) GetUseWaf() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseWaf
}

// GetUseWafOk returns a tuple with the UseWaf field value
// and a boolean to check if the value has been set.
func (o *ControlsPolicyFilterConfig) GetUseWafOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseWaf, true
}

// SetUseWaf sets field value
func (o *ControlsPolicyFilterConfig) SetUseWaf(v bool) {
	o.UseWaf = v
}

func (o ControlsPolicyFilterConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsPolicyFilterConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnablePolicyLogs) {
		toSerialize["enable_policy_logs"] = o.EnablePolicyLogs
	}
	if o.IgnoredRemoteHosts != nil {
		toSerialize["ignored_remote_hosts"] = o.IgnoredRemoteHosts
	}
	if o.IgnoredRemoteIps != nil {
		toSerialize["ignored_remote_ips"] = o.IgnoredRemoteIps
	}
	toSerialize["node_id"] = o.NodeId
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["use_waf"] = o.UseWaf
	return toSerialize, nil
}

func (o *ControlsPolicyFilterConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ignored_remote_ips",
		"node_id",
		"policies",
		"updated_at",
		"use_waf",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varControlsPolicyFilterConfig := _ControlsPolicyFilterConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varControlsPolicyFilterConfig)

	if err != nil {
		return err
	}

	*o = ControlsPolicyFilterConfig(varControlsPolicyFilterConfig)

	return err
}

type NullableControlsPolicyFilterConfig struct {
	value *ControlsPolicyFilterConfig
	isSet bool
}

func (v NullableControlsPolicyFilterConfig) Get() *ControlsPolicyFilterConfig {
	return v.value
}

func (v *NullableControlsPolicyFilterConfig) Set(val *ControlsPolicyFilterConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsPolicyFilterConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsPolicyFilterConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsPolicyFilterConfig(val *ControlsPolicyFilterConfig) *NullableControlsPolicyFilterConfig {
	return &NullableControlsPolicyFilterConfig{value: val, isSet: true}
}

func (v NullableControlsPolicyFilterConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsPolicyFilterConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


