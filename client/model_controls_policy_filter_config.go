/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ControlsPolicyFilterConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsPolicyFilterConfig{}

// ControlsPolicyFilterConfig struct for ControlsPolicyFilterConfig
type ControlsPolicyFilterConfig struct {
	Policies []ControlsPolicy `json:"policies"`
}

// NewControlsPolicyFilterConfig instantiates a new ControlsPolicyFilterConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsPolicyFilterConfig(policies []ControlsPolicy) *ControlsPolicyFilterConfig {
	this := ControlsPolicyFilterConfig{}
	this.Policies = policies
	return &this
}

// NewControlsPolicyFilterConfigWithDefaults instantiates a new ControlsPolicyFilterConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsPolicyFilterConfigWithDefaults() *ControlsPolicyFilterConfig {
	this := ControlsPolicyFilterConfig{}
	return &this
}

// GetPolicies returns the Policies field value
// If the value is explicit nil, the zero value for []ControlsPolicy will be returned
func (o *ControlsPolicyFilterConfig) GetPolicies() []ControlsPolicy {
	if o == nil {
		var ret []ControlsPolicy
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsPolicyFilterConfig) GetPoliciesOk() ([]ControlsPolicy, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// SetPolicies sets field value
func (o *ControlsPolicyFilterConfig) SetPolicies(v []ControlsPolicy) {
	o.Policies = v
}

func (o ControlsPolicyFilterConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsPolicyFilterConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	return toSerialize, nil
}

type NullableControlsPolicyFilterConfig struct {
	value *ControlsPolicyFilterConfig
	isSet bool
}

func (v NullableControlsPolicyFilterConfig) Get() *ControlsPolicyFilterConfig {
	return v.value
}

func (v *NullableControlsPolicyFilterConfig) Set(val *ControlsPolicyFilterConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsPolicyFilterConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsPolicyFilterConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsPolicyFilterConfig(val *ControlsPolicyFilterConfig) *NullableControlsPolicyFilterConfig {
	return &NullableControlsPolicyFilterConfig{value: val, isSet: true}
}

func (v NullableControlsPolicyFilterConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsPolicyFilterConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


