/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ControlsPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsPolicy{}

// ControlsPolicy struct for ControlsPolicy
type ControlsPolicy struct {
	CountLimit int32 `json:"count_limit"`
	DurationCountLimitSec int32 `json:"duration_count_limit_sec"`
	DurationSec int32 `json:"duration_sec"`
	EventType string `json:"event_type"`
	Matcher map[string]interface{} `json:"matcher"`
}

// NewControlsPolicy instantiates a new ControlsPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsPolicy(countLimit int32, durationCountLimitSec int32, durationSec int32, eventType string, matcher map[string]interface{}) *ControlsPolicy {
	this := ControlsPolicy{}
	this.CountLimit = countLimit
	this.DurationCountLimitSec = durationCountLimitSec
	this.DurationSec = durationSec
	this.EventType = eventType
	this.Matcher = matcher
	return &this
}

// NewControlsPolicyWithDefaults instantiates a new ControlsPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsPolicyWithDefaults() *ControlsPolicy {
	this := ControlsPolicy{}
	return &this
}

// GetCountLimit returns the CountLimit field value
func (o *ControlsPolicy) GetCountLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CountLimit
}

// GetCountLimitOk returns a tuple with the CountLimit field value
// and a boolean to check if the value has been set.
func (o *ControlsPolicy) GetCountLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountLimit, true
}

// SetCountLimit sets field value
func (o *ControlsPolicy) SetCountLimit(v int32) {
	o.CountLimit = v
}

// GetDurationCountLimitSec returns the DurationCountLimitSec field value
func (o *ControlsPolicy) GetDurationCountLimitSec() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DurationCountLimitSec
}

// GetDurationCountLimitSecOk returns a tuple with the DurationCountLimitSec field value
// and a boolean to check if the value has been set.
func (o *ControlsPolicy) GetDurationCountLimitSecOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationCountLimitSec, true
}

// SetDurationCountLimitSec sets field value
func (o *ControlsPolicy) SetDurationCountLimitSec(v int32) {
	o.DurationCountLimitSec = v
}

// GetDurationSec returns the DurationSec field value
func (o *ControlsPolicy) GetDurationSec() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DurationSec
}

// GetDurationSecOk returns a tuple with the DurationSec field value
// and a boolean to check if the value has been set.
func (o *ControlsPolicy) GetDurationSecOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationSec, true
}

// SetDurationSec sets field value
func (o *ControlsPolicy) SetDurationSec(v int32) {
	o.DurationSec = v
}

// GetEventType returns the EventType field value
func (o *ControlsPolicy) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *ControlsPolicy) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *ControlsPolicy) SetEventType(v string) {
	o.EventType = v
}

// GetMatcher returns the Matcher field value
func (o *ControlsPolicy) GetMatcher() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Matcher
}

// GetMatcherOk returns a tuple with the Matcher field value
// and a boolean to check if the value has been set.
func (o *ControlsPolicy) GetMatcherOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Matcher, true
}

// SetMatcher sets field value
func (o *ControlsPolicy) SetMatcher(v map[string]interface{}) {
	o.Matcher = v
}

func (o ControlsPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count_limit"] = o.CountLimit
	toSerialize["duration_count_limit_sec"] = o.DurationCountLimitSec
	toSerialize["duration_sec"] = o.DurationSec
	toSerialize["event_type"] = o.EventType
	toSerialize["matcher"] = o.Matcher
	return toSerialize, nil
}

type NullableControlsPolicy struct {
	value *ControlsPolicy
	isSet bool
}

func (v NullableControlsPolicy) Get() *ControlsPolicy {
	return v.value
}

func (v *NullableControlsPolicy) Set(val *ControlsPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsPolicy(val *ControlsPolicy) *NullableControlsPolicy {
	return &NullableControlsPolicy{value: val, isSet: true}
}

func (v NullableControlsPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


