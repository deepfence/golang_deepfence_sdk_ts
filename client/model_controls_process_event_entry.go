/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the ControlsProcessEventEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsProcessEventEntry{}

// ControlsProcessEventEntry struct for ControlsProcessEventEntry
type ControlsProcessEventEntry struct {
	Event string `json:"event"`
	FailureSeverity string `json:"failure_severity"`
	SkipCommList []string `json:"skip_comm_list,omitempty"`
	SkipPathList []string `json:"skip_path_list,omitempty"`
	SuccessSeverity string `json:"success_severity"`
}

type _ControlsProcessEventEntry ControlsProcessEventEntry

// NewControlsProcessEventEntry instantiates a new ControlsProcessEventEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsProcessEventEntry(event string, failureSeverity string, successSeverity string) *ControlsProcessEventEntry {
	this := ControlsProcessEventEntry{}
	this.Event = event
	this.FailureSeverity = failureSeverity
	this.SuccessSeverity = successSeverity
	return &this
}

// NewControlsProcessEventEntryWithDefaults instantiates a new ControlsProcessEventEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsProcessEventEntryWithDefaults() *ControlsProcessEventEntry {
	this := ControlsProcessEventEntry{}
	return &this
}

// GetEvent returns the Event field value
func (o *ControlsProcessEventEntry) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *ControlsProcessEventEntry) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *ControlsProcessEventEntry) SetEvent(v string) {
	o.Event = v
}

// GetFailureSeverity returns the FailureSeverity field value
func (o *ControlsProcessEventEntry) GetFailureSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FailureSeverity
}

// GetFailureSeverityOk returns a tuple with the FailureSeverity field value
// and a boolean to check if the value has been set.
func (o *ControlsProcessEventEntry) GetFailureSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailureSeverity, true
}

// SetFailureSeverity sets field value
func (o *ControlsProcessEventEntry) SetFailureSeverity(v string) {
	o.FailureSeverity = v
}

// GetSkipCommList returns the SkipCommList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ControlsProcessEventEntry) GetSkipCommList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SkipCommList
}

// GetSkipCommListOk returns a tuple with the SkipCommList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsProcessEventEntry) GetSkipCommListOk() ([]string, bool) {
	if o == nil || IsNil(o.SkipCommList) {
		return nil, false
	}
	return o.SkipCommList, true
}

// HasSkipCommList returns a boolean if a field has been set.
func (o *ControlsProcessEventEntry) HasSkipCommList() bool {
	if o != nil && IsNil(o.SkipCommList) {
		return true
	}

	return false
}

// SetSkipCommList gets a reference to the given []string and assigns it to the SkipCommList field.
func (o *ControlsProcessEventEntry) SetSkipCommList(v []string) {
	o.SkipCommList = v
}

// GetSkipPathList returns the SkipPathList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ControlsProcessEventEntry) GetSkipPathList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SkipPathList
}

// GetSkipPathListOk returns a tuple with the SkipPathList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsProcessEventEntry) GetSkipPathListOk() ([]string, bool) {
	if o == nil || IsNil(o.SkipPathList) {
		return nil, false
	}
	return o.SkipPathList, true
}

// HasSkipPathList returns a boolean if a field has been set.
func (o *ControlsProcessEventEntry) HasSkipPathList() bool {
	if o != nil && IsNil(o.SkipPathList) {
		return true
	}

	return false
}

// SetSkipPathList gets a reference to the given []string and assigns it to the SkipPathList field.
func (o *ControlsProcessEventEntry) SetSkipPathList(v []string) {
	o.SkipPathList = v
}

// GetSuccessSeverity returns the SuccessSeverity field value
func (o *ControlsProcessEventEntry) GetSuccessSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuccessSeverity
}

// GetSuccessSeverityOk returns a tuple with the SuccessSeverity field value
// and a boolean to check if the value has been set.
func (o *ControlsProcessEventEntry) GetSuccessSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuccessSeverity, true
}

// SetSuccessSeverity sets field value
func (o *ControlsProcessEventEntry) SetSuccessSeverity(v string) {
	o.SuccessSeverity = v
}

func (o ControlsProcessEventEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsProcessEventEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	toSerialize["failure_severity"] = o.FailureSeverity
	if o.SkipCommList != nil {
		toSerialize["skip_comm_list"] = o.SkipCommList
	}
	if o.SkipPathList != nil {
		toSerialize["skip_path_list"] = o.SkipPathList
	}
	toSerialize["success_severity"] = o.SuccessSeverity
	return toSerialize, nil
}

func (o *ControlsProcessEventEntry) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event",
		"failure_severity",
		"success_severity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varControlsProcessEventEntry := _ControlsProcessEventEntry{}

	err = json.Unmarshal(bytes, &varControlsProcessEventEntry)

	if err != nil {
		return err
	}

	*o = ControlsProcessEventEntry(varControlsProcessEventEntry)

	return err
}

type NullableControlsProcessEventEntry struct {
	value *ControlsProcessEventEntry
	isSet bool
}

func (v NullableControlsProcessEventEntry) Get() *ControlsProcessEventEntry {
	return v.value
}

func (v *NullableControlsProcessEventEntry) Set(val *ControlsProcessEventEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsProcessEventEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsProcessEventEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsProcessEventEntry(val *ControlsProcessEventEntry) *NullableControlsProcessEventEntry {
	return &NullableControlsProcessEventEntry{value: val, isSet: true}
}

func (v NullableControlsProcessEventEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsProcessEventEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


