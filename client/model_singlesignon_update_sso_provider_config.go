/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.2.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SinglesignonUpdateSSOProviderConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SinglesignonUpdateSSOProviderConfig{}

// SinglesignonUpdateSSOProviderConfig struct for SinglesignonUpdateSSOProviderConfig
type SinglesignonUpdateSSOProviderConfig struct {
	ClientId string `json:"client_id"`
	ClientSecret *string `json:"client_secret,omitempty"`
	DisablePasswordLogin bool `json:"disable_password_login"`
	IssuerUrl *string `json:"issuer_url,omitempty"`
}

type _SinglesignonUpdateSSOProviderConfig SinglesignonUpdateSSOProviderConfig

// NewSinglesignonUpdateSSOProviderConfig instantiates a new SinglesignonUpdateSSOProviderConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSinglesignonUpdateSSOProviderConfig(clientId string, disablePasswordLogin bool) *SinglesignonUpdateSSOProviderConfig {
	this := SinglesignonUpdateSSOProviderConfig{}
	this.ClientId = clientId
	this.DisablePasswordLogin = disablePasswordLogin
	return &this
}

// NewSinglesignonUpdateSSOProviderConfigWithDefaults instantiates a new SinglesignonUpdateSSOProviderConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSinglesignonUpdateSSOProviderConfigWithDefaults() *SinglesignonUpdateSSOProviderConfig {
	this := SinglesignonUpdateSSOProviderConfig{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *SinglesignonUpdateSSOProviderConfig) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *SinglesignonUpdateSSOProviderConfig) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *SinglesignonUpdateSSOProviderConfig) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *SinglesignonUpdateSSOProviderConfig) GetClientSecret() string {
	if o == nil || IsNil(o.ClientSecret) {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglesignonUpdateSSOProviderConfig) GetClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.ClientSecret) {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *SinglesignonUpdateSSOProviderConfig) HasClientSecret() bool {
	if o != nil && !IsNil(o.ClientSecret) {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *SinglesignonUpdateSSOProviderConfig) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetDisablePasswordLogin returns the DisablePasswordLogin field value
func (o *SinglesignonUpdateSSOProviderConfig) GetDisablePasswordLogin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DisablePasswordLogin
}

// GetDisablePasswordLoginOk returns a tuple with the DisablePasswordLogin field value
// and a boolean to check if the value has been set.
func (o *SinglesignonUpdateSSOProviderConfig) GetDisablePasswordLoginOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisablePasswordLogin, true
}

// SetDisablePasswordLogin sets field value
func (o *SinglesignonUpdateSSOProviderConfig) SetDisablePasswordLogin(v bool) {
	o.DisablePasswordLogin = v
}

// GetIssuerUrl returns the IssuerUrl field value if set, zero value otherwise.
func (o *SinglesignonUpdateSSOProviderConfig) GetIssuerUrl() string {
	if o == nil || IsNil(o.IssuerUrl) {
		var ret string
		return ret
	}
	return *o.IssuerUrl
}

// GetIssuerUrlOk returns a tuple with the IssuerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglesignonUpdateSSOProviderConfig) GetIssuerUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerUrl) {
		return nil, false
	}
	return o.IssuerUrl, true
}

// HasIssuerUrl returns a boolean if a field has been set.
func (o *SinglesignonUpdateSSOProviderConfig) HasIssuerUrl() bool {
	if o != nil && !IsNil(o.IssuerUrl) {
		return true
	}

	return false
}

// SetIssuerUrl gets a reference to the given string and assigns it to the IssuerUrl field.
func (o *SinglesignonUpdateSSOProviderConfig) SetIssuerUrl(v string) {
	o.IssuerUrl = &v
}

func (o SinglesignonUpdateSSOProviderConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SinglesignonUpdateSSOProviderConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["client_id"] = o.ClientId
	if !IsNil(o.ClientSecret) {
		toSerialize["client_secret"] = o.ClientSecret
	}
	toSerialize["disable_password_login"] = o.DisablePasswordLogin
	if !IsNil(o.IssuerUrl) {
		toSerialize["issuer_url"] = o.IssuerUrl
	}
	return toSerialize, nil
}

func (o *SinglesignonUpdateSSOProviderConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"client_id",
		"disable_password_login",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSinglesignonUpdateSSOProviderConfig := _SinglesignonUpdateSSOProviderConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSinglesignonUpdateSSOProviderConfig)

	if err != nil {
		return err
	}

	*o = SinglesignonUpdateSSOProviderConfig(varSinglesignonUpdateSSOProviderConfig)

	return err
}

type NullableSinglesignonUpdateSSOProviderConfig struct {
	value *SinglesignonUpdateSSOProviderConfig
	isSet bool
}

func (v NullableSinglesignonUpdateSSOProviderConfig) Get() *SinglesignonUpdateSSOProviderConfig {
	return v.value
}

func (v *NullableSinglesignonUpdateSSOProviderConfig) Set(val *SinglesignonUpdateSSOProviderConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSinglesignonUpdateSSOProviderConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSinglesignonUpdateSSOProviderConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinglesignonUpdateSSOProviderConfig(val *SinglesignonUpdateSSOProviderConfig) *NullableSinglesignonUpdateSSOProviderConfig {
	return &NullableSinglesignonUpdateSSOProviderConfig{value: val, isSet: true}
}

func (v NullableSinglesignonUpdateSSOProviderConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinglesignonUpdateSSOProviderConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


