/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ControlsFilesystemTracerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsFilesystemTracerConfig{}

// ControlsFilesystemTracerConfig struct for ControlsFilesystemTracerConfig
type ControlsFilesystemTracerConfig struct {
	Hash string `json:"hash"`
	MonitoredFiles []ControlsMonitoredFilesConfig `json:"monitored_files"`
	ProcessEvents []ControlsProcessEventConfig `json:"process_events"`
}

// NewControlsFilesystemTracerConfig instantiates a new ControlsFilesystemTracerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsFilesystemTracerConfig(hash string, monitoredFiles []ControlsMonitoredFilesConfig, processEvents []ControlsProcessEventConfig) *ControlsFilesystemTracerConfig {
	this := ControlsFilesystemTracerConfig{}
	this.Hash = hash
	this.MonitoredFiles = monitoredFiles
	this.ProcessEvents = processEvents
	return &this
}

// NewControlsFilesystemTracerConfigWithDefaults instantiates a new ControlsFilesystemTracerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsFilesystemTracerConfigWithDefaults() *ControlsFilesystemTracerConfig {
	this := ControlsFilesystemTracerConfig{}
	return &this
}

// GetHash returns the Hash field value
func (o *ControlsFilesystemTracerConfig) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *ControlsFilesystemTracerConfig) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *ControlsFilesystemTracerConfig) SetHash(v string) {
	o.Hash = v
}

// GetMonitoredFiles returns the MonitoredFiles field value
// If the value is explicit nil, the zero value for []ControlsMonitoredFilesConfig will be returned
func (o *ControlsFilesystemTracerConfig) GetMonitoredFiles() []ControlsMonitoredFilesConfig {
	if o == nil {
		var ret []ControlsMonitoredFilesConfig
		return ret
	}

	return o.MonitoredFiles
}

// GetMonitoredFilesOk returns a tuple with the MonitoredFiles field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsFilesystemTracerConfig) GetMonitoredFilesOk() ([]ControlsMonitoredFilesConfig, bool) {
	if o == nil || IsNil(o.MonitoredFiles) {
		return nil, false
	}
	return o.MonitoredFiles, true
}

// SetMonitoredFiles sets field value
func (o *ControlsFilesystemTracerConfig) SetMonitoredFiles(v []ControlsMonitoredFilesConfig) {
	o.MonitoredFiles = v
}

// GetProcessEvents returns the ProcessEvents field value
// If the value is explicit nil, the zero value for []ControlsProcessEventConfig will be returned
func (o *ControlsFilesystemTracerConfig) GetProcessEvents() []ControlsProcessEventConfig {
	if o == nil {
		var ret []ControlsProcessEventConfig
		return ret
	}

	return o.ProcessEvents
}

// GetProcessEventsOk returns a tuple with the ProcessEvents field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsFilesystemTracerConfig) GetProcessEventsOk() ([]ControlsProcessEventConfig, bool) {
	if o == nil || IsNil(o.ProcessEvents) {
		return nil, false
	}
	return o.ProcessEvents, true
}

// SetProcessEvents sets field value
func (o *ControlsFilesystemTracerConfig) SetProcessEvents(v []ControlsProcessEventConfig) {
	o.ProcessEvents = v
}

func (o ControlsFilesystemTracerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsFilesystemTracerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	if o.MonitoredFiles != nil {
		toSerialize["monitored_files"] = o.MonitoredFiles
	}
	if o.ProcessEvents != nil {
		toSerialize["process_events"] = o.ProcessEvents
	}
	return toSerialize, nil
}

type NullableControlsFilesystemTracerConfig struct {
	value *ControlsFilesystemTracerConfig
	isSet bool
}

func (v NullableControlsFilesystemTracerConfig) Get() *ControlsFilesystemTracerConfig {
	return v.value
}

func (v *NullableControlsFilesystemTracerConfig) Set(val *ControlsFilesystemTracerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsFilesystemTracerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsFilesystemTracerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsFilesystemTracerConfig(val *ControlsFilesystemTracerConfig) *NullableControlsFilesystemTracerConfig {
	return &NullableControlsFilesystemTracerConfig{value: val, isSet: true}
}

func (v NullableControlsFilesystemTracerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsFilesystemTracerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


