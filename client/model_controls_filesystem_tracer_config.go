/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ControlsFilesystemTracerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsFilesystemTracerConfig{}

// ControlsFilesystemTracerConfig struct for ControlsFilesystemTracerConfig
type ControlsFilesystemTracerConfig struct {
	NodeId string `json:"node_id"`
	UpdatedAt int32 `json:"updated_at"`
	Watchedentries []ControlsMonitoredFilesConfig `json:"watchedentries"`
}

type _ControlsFilesystemTracerConfig ControlsFilesystemTracerConfig

// NewControlsFilesystemTracerConfig instantiates a new ControlsFilesystemTracerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsFilesystemTracerConfig(nodeId string, updatedAt int32, watchedentries []ControlsMonitoredFilesConfig) *ControlsFilesystemTracerConfig {
	this := ControlsFilesystemTracerConfig{}
	this.NodeId = nodeId
	this.UpdatedAt = updatedAt
	this.Watchedentries = watchedentries
	return &this
}

// NewControlsFilesystemTracerConfigWithDefaults instantiates a new ControlsFilesystemTracerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsFilesystemTracerConfigWithDefaults() *ControlsFilesystemTracerConfig {
	this := ControlsFilesystemTracerConfig{}
	return &this
}

// GetNodeId returns the NodeId field value
func (o *ControlsFilesystemTracerConfig) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *ControlsFilesystemTracerConfig) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *ControlsFilesystemTracerConfig) SetNodeId(v string) {
	o.NodeId = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ControlsFilesystemTracerConfig) GetUpdatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ControlsFilesystemTracerConfig) GetUpdatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ControlsFilesystemTracerConfig) SetUpdatedAt(v int32) {
	o.UpdatedAt = v
}

// GetWatchedentries returns the Watchedentries field value
// If the value is explicit nil, the zero value for []ControlsMonitoredFilesConfig will be returned
func (o *ControlsFilesystemTracerConfig) GetWatchedentries() []ControlsMonitoredFilesConfig {
	if o == nil {
		var ret []ControlsMonitoredFilesConfig
		return ret
	}

	return o.Watchedentries
}

// GetWatchedentriesOk returns a tuple with the Watchedentries field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsFilesystemTracerConfig) GetWatchedentriesOk() ([]ControlsMonitoredFilesConfig, bool) {
	if o == nil || IsNil(o.Watchedentries) {
		return nil, false
	}
	return o.Watchedentries, true
}

// SetWatchedentries sets field value
func (o *ControlsFilesystemTracerConfig) SetWatchedentries(v []ControlsMonitoredFilesConfig) {
	o.Watchedentries = v
}

func (o ControlsFilesystemTracerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsFilesystemTracerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["node_id"] = o.NodeId
	toSerialize["updated_at"] = o.UpdatedAt
	if o.Watchedentries != nil {
		toSerialize["watchedentries"] = o.Watchedentries
	}
	return toSerialize, nil
}

func (o *ControlsFilesystemTracerConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"node_id",
		"updated_at",
		"watchedentries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varControlsFilesystemTracerConfig := _ControlsFilesystemTracerConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varControlsFilesystemTracerConfig)

	if err != nil {
		return err
	}

	*o = ControlsFilesystemTracerConfig(varControlsFilesystemTracerConfig)

	return err
}

type NullableControlsFilesystemTracerConfig struct {
	value *ControlsFilesystemTracerConfig
	isSet bool
}

func (v NullableControlsFilesystemTracerConfig) Get() *ControlsFilesystemTracerConfig {
	return v.value
}

func (v *NullableControlsFilesystemTracerConfig) Set(val *ControlsFilesystemTracerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsFilesystemTracerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsFilesystemTracerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsFilesystemTracerConfig(val *ControlsFilesystemTracerConfig) *NullableControlsFilesystemTracerConfig {
	return &NullableControlsFilesystemTracerConfig{value: val, isSet: true}
}

func (v NullableControlsFilesystemTracerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsFilesystemTracerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


