/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ReportersDailySevCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportersDailySevCounts{}

// ReportersDailySevCounts struct for ReportersDailySevCounts
type ReportersDailySevCounts struct {
	DaysToSevCounts map[string]ReportersSevCounts `json:"days_to_sev_counts"`
}

// NewReportersDailySevCounts instantiates a new ReportersDailySevCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportersDailySevCounts(daysToSevCounts map[string]ReportersSevCounts) *ReportersDailySevCounts {
	this := ReportersDailySevCounts{}
	this.DaysToSevCounts = daysToSevCounts
	return &this
}

// NewReportersDailySevCountsWithDefaults instantiates a new ReportersDailySevCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportersDailySevCountsWithDefaults() *ReportersDailySevCounts {
	this := ReportersDailySevCounts{}
	return &this
}

// GetDaysToSevCounts returns the DaysToSevCounts field value
// If the value is explicit nil, the zero value for map[string]ReportersSevCounts will be returned
func (o *ReportersDailySevCounts) GetDaysToSevCounts() map[string]ReportersSevCounts {
	if o == nil {
		var ret map[string]ReportersSevCounts
		return ret
	}

	return o.DaysToSevCounts
}

// GetDaysToSevCountsOk returns a tuple with the DaysToSevCounts field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportersDailySevCounts) GetDaysToSevCountsOk() (*map[string]ReportersSevCounts, bool) {
	if o == nil || IsNil(o.DaysToSevCounts) {
		return nil, false
	}
	return &o.DaysToSevCounts, true
}

// SetDaysToSevCounts sets field value
func (o *ReportersDailySevCounts) SetDaysToSevCounts(v map[string]ReportersSevCounts) {
	o.DaysToSevCounts = v
}

func (o ReportersDailySevCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportersDailySevCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DaysToSevCounts != nil {
		toSerialize["days_to_sev_counts"] = o.DaysToSevCounts
	}
	return toSerialize, nil
}

type NullableReportersDailySevCounts struct {
	value *ReportersDailySevCounts
	isSet bool
}

func (v NullableReportersDailySevCounts) Get() *ReportersDailySevCounts {
	return v.value
}

func (v *NullableReportersDailySevCounts) Set(val *ReportersDailySevCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableReportersDailySevCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableReportersDailySevCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportersDailySevCounts(val *ReportersDailySevCounts) *NullableReportersDailySevCounts {
	return &NullableReportersDailySevCounts{value: val, isSet: true}
}

func (v NullableReportersDailySevCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportersDailySevCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


