/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v2.5.6
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchMostExploitableCountResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchMostExploitableCountResp{}

// SearchMostExploitableCountResp struct for SearchMostExploitableCountResp
type SearchMostExploitableCountResp struct {
	Count int32 `json:"count"`
	Description string `json:"description"`
	ExploitabilityScore int32 `json:"exploitability_score"`
}

type _SearchMostExploitableCountResp SearchMostExploitableCountResp

// NewSearchMostExploitableCountResp instantiates a new SearchMostExploitableCountResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchMostExploitableCountResp(count int32, description string, exploitabilityScore int32) *SearchMostExploitableCountResp {
	this := SearchMostExploitableCountResp{}
	this.Count = count
	this.Description = description
	this.ExploitabilityScore = exploitabilityScore
	return &this
}

// NewSearchMostExploitableCountRespWithDefaults instantiates a new SearchMostExploitableCountResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchMostExploitableCountRespWithDefaults() *SearchMostExploitableCountResp {
	this := SearchMostExploitableCountResp{}
	return &this
}

// GetCount returns the Count field value
func (o *SearchMostExploitableCountResp) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *SearchMostExploitableCountResp) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *SearchMostExploitableCountResp) SetCount(v int32) {
	o.Count = v
}

// GetDescription returns the Description field value
func (o *SearchMostExploitableCountResp) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SearchMostExploitableCountResp) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SearchMostExploitableCountResp) SetDescription(v string) {
	o.Description = v
}

// GetExploitabilityScore returns the ExploitabilityScore field value
func (o *SearchMostExploitableCountResp) GetExploitabilityScore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExploitabilityScore
}

// GetExploitabilityScoreOk returns a tuple with the ExploitabilityScore field value
// and a boolean to check if the value has been set.
func (o *SearchMostExploitableCountResp) GetExploitabilityScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExploitabilityScore, true
}

// SetExploitabilityScore sets field value
func (o *SearchMostExploitableCountResp) SetExploitabilityScore(v int32) {
	o.ExploitabilityScore = v
}

func (o SearchMostExploitableCountResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchMostExploitableCountResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["description"] = o.Description
	toSerialize["exploitability_score"] = o.ExploitabilityScore
	return toSerialize, nil
}

func (o *SearchMostExploitableCountResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"description",
		"exploitability_score",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchMostExploitableCountResp := _SearchMostExploitableCountResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchMostExploitableCountResp)

	if err != nil {
		return err
	}

	*o = SearchMostExploitableCountResp(varSearchMostExploitableCountResp)

	return err
}

type NullableSearchMostExploitableCountResp struct {
	value *SearchMostExploitableCountResp
	isSet bool
}

func (v NullableSearchMostExploitableCountResp) Get() *SearchMostExploitableCountResp {
	return v.value
}

func (v *NullableSearchMostExploitableCountResp) Set(val *SearchMostExploitableCountResp) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchMostExploitableCountResp) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchMostExploitableCountResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchMostExploitableCountResp(val *SearchMostExploitableCountResp) *NullableSearchMostExploitableCountResp {
	return &NullableSearchMostExploitableCountResp{value: val, isSet: true}
}

func (v NullableSearchMostExploitableCountResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchMostExploitableCountResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


