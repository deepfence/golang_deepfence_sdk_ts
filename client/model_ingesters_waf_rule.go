/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v2.5.2
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IngestersWAFRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestersWAFRule{}

// IngestersWAFRule struct for IngestersWAFRule
type IngestersWAFRule struct {
	Action string `json:"action"`
	ExecutedAt *int32 `json:"executed_at,omitempty"`
	HostName *string `json:"host_name,omitempty"`
	RemoteIp string `json:"remote_ip"`
	RemotePort *int32 `json:"remote_port,omitempty"`
}

type _IngestersWAFRule IngestersWAFRule

// NewIngestersWAFRule instantiates a new IngestersWAFRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestersWAFRule(action string, remoteIp string) *IngestersWAFRule {
	this := IngestersWAFRule{}
	this.Action = action
	this.RemoteIp = remoteIp
	return &this
}

// NewIngestersWAFRuleWithDefaults instantiates a new IngestersWAFRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestersWAFRuleWithDefaults() *IngestersWAFRule {
	this := IngestersWAFRule{}
	return &this
}

// GetAction returns the Action field value
func (o *IngestersWAFRule) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *IngestersWAFRule) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *IngestersWAFRule) SetAction(v string) {
	o.Action = v
}

// GetExecutedAt returns the ExecutedAt field value if set, zero value otherwise.
func (o *IngestersWAFRule) GetExecutedAt() int32 {
	if o == nil || IsNil(o.ExecutedAt) {
		var ret int32
		return ret
	}
	return *o.ExecutedAt
}

// GetExecutedAtOk returns a tuple with the ExecutedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersWAFRule) GetExecutedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.ExecutedAt) {
		return nil, false
	}
	return o.ExecutedAt, true
}

// HasExecutedAt returns a boolean if a field has been set.
func (o *IngestersWAFRule) HasExecutedAt() bool {
	if o != nil && !IsNil(o.ExecutedAt) {
		return true
	}

	return false
}

// SetExecutedAt gets a reference to the given int32 and assigns it to the ExecutedAt field.
func (o *IngestersWAFRule) SetExecutedAt(v int32) {
	o.ExecutedAt = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *IngestersWAFRule) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersWAFRule) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *IngestersWAFRule) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *IngestersWAFRule) SetHostName(v string) {
	o.HostName = &v
}

// GetRemoteIp returns the RemoteIp field value
func (o *IngestersWAFRule) GetRemoteIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteIp
}

// GetRemoteIpOk returns a tuple with the RemoteIp field value
// and a boolean to check if the value has been set.
func (o *IngestersWAFRule) GetRemoteIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteIp, true
}

// SetRemoteIp sets field value
func (o *IngestersWAFRule) SetRemoteIp(v string) {
	o.RemoteIp = v
}

// GetRemotePort returns the RemotePort field value if set, zero value otherwise.
func (o *IngestersWAFRule) GetRemotePort() int32 {
	if o == nil || IsNil(o.RemotePort) {
		var ret int32
		return ret
	}
	return *o.RemotePort
}

// GetRemotePortOk returns a tuple with the RemotePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersWAFRule) GetRemotePortOk() (*int32, bool) {
	if o == nil || IsNil(o.RemotePort) {
		return nil, false
	}
	return o.RemotePort, true
}

// HasRemotePort returns a boolean if a field has been set.
func (o *IngestersWAFRule) HasRemotePort() bool {
	if o != nil && !IsNil(o.RemotePort) {
		return true
	}

	return false
}

// SetRemotePort gets a reference to the given int32 and assigns it to the RemotePort field.
func (o *IngestersWAFRule) SetRemotePort(v int32) {
	o.RemotePort = &v
}

func (o IngestersWAFRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestersWAFRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.ExecutedAt) {
		toSerialize["executed_at"] = o.ExecutedAt
	}
	if !IsNil(o.HostName) {
		toSerialize["host_name"] = o.HostName
	}
	toSerialize["remote_ip"] = o.RemoteIp
	if !IsNil(o.RemotePort) {
		toSerialize["remote_port"] = o.RemotePort
	}
	return toSerialize, nil
}

func (o *IngestersWAFRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"remote_ip",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngestersWAFRule := _IngestersWAFRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngestersWAFRule)

	if err != nil {
		return err
	}

	*o = IngestersWAFRule(varIngestersWAFRule)

	return err
}

type NullableIngestersWAFRule struct {
	value *IngestersWAFRule
	isSet bool
}

func (v NullableIngestersWAFRule) Get() *IngestersWAFRule {
	return v.value
}

func (v *NullableIngestersWAFRule) Set(val *IngestersWAFRule) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestersWAFRule) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestersWAFRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestersWAFRule(val *IngestersWAFRule) *NullableIngestersWAFRule {
	return &NullableIngestersWAFRule{value: val, isSet: true}
}

func (v NullableIngestersWAFRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestersWAFRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


