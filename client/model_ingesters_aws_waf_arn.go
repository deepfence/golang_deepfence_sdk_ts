/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IngestersAWSWafARN type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestersAWSWafARN{}

// IngestersAWSWafARN struct for IngestersAWSWafARN
type IngestersAWSWafARN struct {
	Arn string `json:"arn"`
	Region string `json:"region"`
}

type _IngestersAWSWafARN IngestersAWSWafARN

// NewIngestersAWSWafARN instantiates a new IngestersAWSWafARN object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestersAWSWafARN(arn string, region string) *IngestersAWSWafARN {
	this := IngestersAWSWafARN{}
	this.Arn = arn
	this.Region = region
	return &this
}

// NewIngestersAWSWafARNWithDefaults instantiates a new IngestersAWSWafARN object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestersAWSWafARNWithDefaults() *IngestersAWSWafARN {
	this := IngestersAWSWafARN{}
	return &this
}

// GetArn returns the Arn field value
func (o *IngestersAWSWafARN) GetArn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Arn
}

// GetArnOk returns a tuple with the Arn field value
// and a boolean to check if the value has been set.
func (o *IngestersAWSWafARN) GetArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Arn, true
}

// SetArn sets field value
func (o *IngestersAWSWafARN) SetArn(v string) {
	o.Arn = v
}

// GetRegion returns the Region field value
func (o *IngestersAWSWafARN) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *IngestersAWSWafARN) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *IngestersAWSWafARN) SetRegion(v string) {
	o.Region = v
}

func (o IngestersAWSWafARN) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestersAWSWafARN) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["arn"] = o.Arn
	toSerialize["region"] = o.Region
	return toSerialize, nil
}

func (o *IngestersAWSWafARN) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"arn",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngestersAWSWafARN := _IngestersAWSWafARN{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngestersAWSWafARN)

	if err != nil {
		return err
	}

	*o = IngestersAWSWafARN(varIngestersAWSWafARN)

	return err
}

type NullableIngestersAWSWafARN struct {
	value *IngestersAWSWafARN
	isSet bool
}

func (v NullableIngestersAWSWafARN) Get() *IngestersAWSWafARN {
	return v.value
}

func (v *NullableIngestersAWSWafARN) Set(val *IngestersAWSWafARN) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestersAWSWafARN) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestersAWSWafARN) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestersAWSWafARN(val *IngestersAWSWafARN) *NullableIngestersAWSWafARN {
	return &NullableIngestersAWSWafARN{value: val, isSet: true}
}

func (v NullableIngestersAWSWafARN) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestersAWSWafARN) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


