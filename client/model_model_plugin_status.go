/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v2.5.1
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelPluginStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelPluginStatus{}

// ModelPluginStatus struct for ModelPluginStatus
type ModelPluginStatus struct {
	Description string `json:"description"`
	Status string `json:"status"`
}

type _ModelPluginStatus ModelPluginStatus

// NewModelPluginStatus instantiates a new ModelPluginStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelPluginStatus(description string, status string) *ModelPluginStatus {
	this := ModelPluginStatus{}
	this.Description = description
	this.Status = status
	return &this
}

// NewModelPluginStatusWithDefaults instantiates a new ModelPluginStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelPluginStatusWithDefaults() *ModelPluginStatus {
	this := ModelPluginStatus{}
	return &this
}

// GetDescription returns the Description field value
func (o *ModelPluginStatus) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ModelPluginStatus) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ModelPluginStatus) SetDescription(v string) {
	o.Description = v
}

// GetStatus returns the Status field value
func (o *ModelPluginStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ModelPluginStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ModelPluginStatus) SetStatus(v string) {
	o.Status = v
}

func (o ModelPluginStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelPluginStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *ModelPluginStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelPluginStatus := _ModelPluginStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelPluginStatus)

	if err != nil {
		return err
	}

	*o = ModelPluginStatus(varModelPluginStatus)

	return err
}

type NullableModelPluginStatus struct {
	value *ModelPluginStatus
	isSet bool
}

func (v NullableModelPluginStatus) Get() *ModelPluginStatus {
	return v.value
}

func (v *NullableModelPluginStatus) Set(val *ModelPluginStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModelPluginStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModelPluginStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelPluginStatus(val *ModelPluginStatus) *NullableModelPluginStatus {
	return &NullableModelPluginStatus{value: val, isSet: true}
}

func (v NullableModelPluginStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelPluginStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


