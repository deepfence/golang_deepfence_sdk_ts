/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SinglesignonSSOProviderConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SinglesignonSSOProviderConfig{}

// SinglesignonSSOProviderConfig struct for SinglesignonSSOProviderConfig
type SinglesignonSSOProviderConfig struct {
	ClientId string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
	DisablePasswordLogin bool `json:"disable_password_login"`
	HostName *string `json:"host_name,omitempty"`
	IssuerUrl *string `json:"issuer_url,omitempty"`
	SsoProviderType string `json:"sso_provider_type"`
}

// NewSinglesignonSSOProviderConfig instantiates a new SinglesignonSSOProviderConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSinglesignonSSOProviderConfig(clientId string, clientSecret string, disablePasswordLogin bool, ssoProviderType string) *SinglesignonSSOProviderConfig {
	this := SinglesignonSSOProviderConfig{}
	this.ClientId = clientId
	this.ClientSecret = clientSecret
	this.DisablePasswordLogin = disablePasswordLogin
	this.SsoProviderType = ssoProviderType
	return &this
}

// NewSinglesignonSSOProviderConfigWithDefaults instantiates a new SinglesignonSSOProviderConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSinglesignonSSOProviderConfigWithDefaults() *SinglesignonSSOProviderConfig {
	this := SinglesignonSSOProviderConfig{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *SinglesignonSSOProviderConfig) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *SinglesignonSSOProviderConfig) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *SinglesignonSSOProviderConfig) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value
func (o *SinglesignonSSOProviderConfig) GetClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *SinglesignonSSOProviderConfig) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *SinglesignonSSOProviderConfig) SetClientSecret(v string) {
	o.ClientSecret = v
}

// GetDisablePasswordLogin returns the DisablePasswordLogin field value
func (o *SinglesignonSSOProviderConfig) GetDisablePasswordLogin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DisablePasswordLogin
}

// GetDisablePasswordLoginOk returns a tuple with the DisablePasswordLogin field value
// and a boolean to check if the value has been set.
func (o *SinglesignonSSOProviderConfig) GetDisablePasswordLoginOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisablePasswordLogin, true
}

// SetDisablePasswordLogin sets field value
func (o *SinglesignonSSOProviderConfig) SetDisablePasswordLogin(v bool) {
	o.DisablePasswordLogin = v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *SinglesignonSSOProviderConfig) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglesignonSSOProviderConfig) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *SinglesignonSSOProviderConfig) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *SinglesignonSSOProviderConfig) SetHostName(v string) {
	o.HostName = &v
}

// GetIssuerUrl returns the IssuerUrl field value if set, zero value otherwise.
func (o *SinglesignonSSOProviderConfig) GetIssuerUrl() string {
	if o == nil || IsNil(o.IssuerUrl) {
		var ret string
		return ret
	}
	return *o.IssuerUrl
}

// GetIssuerUrlOk returns a tuple with the IssuerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglesignonSSOProviderConfig) GetIssuerUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerUrl) {
		return nil, false
	}
	return o.IssuerUrl, true
}

// HasIssuerUrl returns a boolean if a field has been set.
func (o *SinglesignonSSOProviderConfig) HasIssuerUrl() bool {
	if o != nil && !IsNil(o.IssuerUrl) {
		return true
	}

	return false
}

// SetIssuerUrl gets a reference to the given string and assigns it to the IssuerUrl field.
func (o *SinglesignonSSOProviderConfig) SetIssuerUrl(v string) {
	o.IssuerUrl = &v
}

// GetSsoProviderType returns the SsoProviderType field value
func (o *SinglesignonSSOProviderConfig) GetSsoProviderType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SsoProviderType
}

// GetSsoProviderTypeOk returns a tuple with the SsoProviderType field value
// and a boolean to check if the value has been set.
func (o *SinglesignonSSOProviderConfig) GetSsoProviderTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SsoProviderType, true
}

// SetSsoProviderType sets field value
func (o *SinglesignonSSOProviderConfig) SetSsoProviderType(v string) {
	o.SsoProviderType = v
}

func (o SinglesignonSSOProviderConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SinglesignonSSOProviderConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["client_id"] = o.ClientId
	toSerialize["client_secret"] = o.ClientSecret
	toSerialize["disable_password_login"] = o.DisablePasswordLogin
	if !IsNil(o.HostName) {
		toSerialize["host_name"] = o.HostName
	}
	if !IsNil(o.IssuerUrl) {
		toSerialize["issuer_url"] = o.IssuerUrl
	}
	toSerialize["sso_provider_type"] = o.SsoProviderType
	return toSerialize, nil
}

type NullableSinglesignonSSOProviderConfig struct {
	value *SinglesignonSSOProviderConfig
	isSet bool
}

func (v NullableSinglesignonSSOProviderConfig) Get() *SinglesignonSSOProviderConfig {
	return v.value
}

func (v *NullableSinglesignonSSOProviderConfig) Set(val *SinglesignonSSOProviderConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSinglesignonSSOProviderConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSinglesignonSSOProviderConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinglesignonSSOProviderConfig(val *SinglesignonSSOProviderConfig) *NullableSinglesignonSSOProviderConfig {
	return &NullableSinglesignonSSOProviderConfig{value: val, isSet: true}
}

func (v NullableSinglesignonSSOProviderConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinglesignonSSOProviderConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


