/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v2.2.1
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelEnableCloudTracerReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelEnableCloudTracerReq{}

// ModelEnableCloudTracerReq struct for ModelEnableCloudTracerReq
type ModelEnableCloudTracerReq struct {
	AgentIds []ModelAgentID `json:"agent_ids"`
	AwsS3Bucket string `json:"aws_s3_bucket"`
}

type _ModelEnableCloudTracerReq ModelEnableCloudTracerReq

// NewModelEnableCloudTracerReq instantiates a new ModelEnableCloudTracerReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelEnableCloudTracerReq(agentIds []ModelAgentID, awsS3Bucket string) *ModelEnableCloudTracerReq {
	this := ModelEnableCloudTracerReq{}
	this.AgentIds = agentIds
	this.AwsS3Bucket = awsS3Bucket
	return &this
}

// NewModelEnableCloudTracerReqWithDefaults instantiates a new ModelEnableCloudTracerReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelEnableCloudTracerReqWithDefaults() *ModelEnableCloudTracerReq {
	this := ModelEnableCloudTracerReq{}
	return &this
}

// GetAgentIds returns the AgentIds field value
// If the value is explicit nil, the zero value for []ModelAgentID will be returned
func (o *ModelEnableCloudTracerReq) GetAgentIds() []ModelAgentID {
	if o == nil {
		var ret []ModelAgentID
		return ret
	}

	return o.AgentIds
}

// GetAgentIdsOk returns a tuple with the AgentIds field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelEnableCloudTracerReq) GetAgentIdsOk() ([]ModelAgentID, bool) {
	if o == nil || IsNil(o.AgentIds) {
		return nil, false
	}
	return o.AgentIds, true
}

// SetAgentIds sets field value
func (o *ModelEnableCloudTracerReq) SetAgentIds(v []ModelAgentID) {
	o.AgentIds = v
}

// GetAwsS3Bucket returns the AwsS3Bucket field value
func (o *ModelEnableCloudTracerReq) GetAwsS3Bucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AwsS3Bucket
}

// GetAwsS3BucketOk returns a tuple with the AwsS3Bucket field value
// and a boolean to check if the value has been set.
func (o *ModelEnableCloudTracerReq) GetAwsS3BucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AwsS3Bucket, true
}

// SetAwsS3Bucket sets field value
func (o *ModelEnableCloudTracerReq) SetAwsS3Bucket(v string) {
	o.AwsS3Bucket = v
}

func (o ModelEnableCloudTracerReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelEnableCloudTracerReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AgentIds != nil {
		toSerialize["agent_ids"] = o.AgentIds
	}
	toSerialize["aws_s3_bucket"] = o.AwsS3Bucket
	return toSerialize, nil
}

func (o *ModelEnableCloudTracerReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"agent_ids",
		"aws_s3_bucket",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelEnableCloudTracerReq := _ModelEnableCloudTracerReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelEnableCloudTracerReq)

	if err != nil {
		return err
	}

	*o = ModelEnableCloudTracerReq(varModelEnableCloudTracerReq)

	return err
}

type NullableModelEnableCloudTracerReq struct {
	value *ModelEnableCloudTracerReq
	isSet bool
}

func (v NullableModelEnableCloudTracerReq) Get() *ModelEnableCloudTracerReq {
	return v.value
}

func (v *NullableModelEnableCloudTracerReq) Set(val *ModelEnableCloudTracerReq) {
	v.value = val
	v.isSet = true
}

func (v NullableModelEnableCloudTracerReq) IsSet() bool {
	return v.isSet
}

func (v *NullableModelEnableCloudTracerReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelEnableCloudTracerReq(val *ModelEnableCloudTracerReq) *NullableModelEnableCloudTracerReq {
	return &NullableModelEnableCloudTracerReq{value: val, isSet: true}
}

func (v NullableModelEnableCloudTracerReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelEnableCloudTracerReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


