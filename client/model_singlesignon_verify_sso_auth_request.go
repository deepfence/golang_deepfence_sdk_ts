/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v3.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SinglesignonVerifySSOAuthRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SinglesignonVerifySSOAuthRequest{}

// SinglesignonVerifySSOAuthRequest struct for SinglesignonVerifySSOAuthRequest
type SinglesignonVerifySSOAuthRequest struct {
	Code string `json:"code"`
	Namespace string `json:"namespace"`
	UserId int32 `json:"user_id"`
}

type _SinglesignonVerifySSOAuthRequest SinglesignonVerifySSOAuthRequest

// NewSinglesignonVerifySSOAuthRequest instantiates a new SinglesignonVerifySSOAuthRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSinglesignonVerifySSOAuthRequest(code string, namespace string, userId int32) *SinglesignonVerifySSOAuthRequest {
	this := SinglesignonVerifySSOAuthRequest{}
	this.Code = code
	this.Namespace = namespace
	this.UserId = userId
	return &this
}

// NewSinglesignonVerifySSOAuthRequestWithDefaults instantiates a new SinglesignonVerifySSOAuthRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSinglesignonVerifySSOAuthRequestWithDefaults() *SinglesignonVerifySSOAuthRequest {
	this := SinglesignonVerifySSOAuthRequest{}
	return &this
}

// GetCode returns the Code field value
func (o *SinglesignonVerifySSOAuthRequest) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *SinglesignonVerifySSOAuthRequest) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *SinglesignonVerifySSOAuthRequest) SetCode(v string) {
	o.Code = v
}

// GetNamespace returns the Namespace field value
func (o *SinglesignonVerifySSOAuthRequest) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *SinglesignonVerifySSOAuthRequest) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *SinglesignonVerifySSOAuthRequest) SetNamespace(v string) {
	o.Namespace = v
}

// GetUserId returns the UserId field value
func (o *SinglesignonVerifySSOAuthRequest) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *SinglesignonVerifySSOAuthRequest) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *SinglesignonVerifySSOAuthRequest) SetUserId(v int32) {
	o.UserId = v
}

func (o SinglesignonVerifySSOAuthRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SinglesignonVerifySSOAuthRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["namespace"] = o.Namespace
	toSerialize["user_id"] = o.UserId
	return toSerialize, nil
}

func (o *SinglesignonVerifySSOAuthRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"namespace",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSinglesignonVerifySSOAuthRequest := _SinglesignonVerifySSOAuthRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSinglesignonVerifySSOAuthRequest)

	if err != nil {
		return err
	}

	*o = SinglesignonVerifySSOAuthRequest(varSinglesignonVerifySSOAuthRequest)

	return err
}

type NullableSinglesignonVerifySSOAuthRequest struct {
	value *SinglesignonVerifySSOAuthRequest
	isSet bool
}

func (v NullableSinglesignonVerifySSOAuthRequest) Get() *SinglesignonVerifySSOAuthRequest {
	return v.value
}

func (v *NullableSinglesignonVerifySSOAuthRequest) Set(val *SinglesignonVerifySSOAuthRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSinglesignonVerifySSOAuthRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSinglesignonVerifySSOAuthRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinglesignonVerifySSOAuthRequest(val *SinglesignonVerifySSOAuthRequest) *NullableSinglesignonVerifySSOAuthRequest {
	return &NullableSinglesignonVerifySSOAuthRequest{value: val, isSet: true}
}

func (v NullableSinglesignonVerifySSOAuthRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinglesignonVerifySSOAuthRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


