/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v2.5.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelMitreAttackMatrix type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMitreAttackMatrix{}

// ModelMitreAttackMatrix struct for ModelMitreAttackMatrix
type ModelMitreAttackMatrix struct {
	Count int32 `json:"count"`
	Tactic string `json:"tactic"`
	TechniqueSummary map[string]ModelMitreTechniqueSummary `json:"technique_summary"`
}

type _ModelMitreAttackMatrix ModelMitreAttackMatrix

// NewModelMitreAttackMatrix instantiates a new ModelMitreAttackMatrix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMitreAttackMatrix(count int32, tactic string, techniqueSummary map[string]ModelMitreTechniqueSummary) *ModelMitreAttackMatrix {
	this := ModelMitreAttackMatrix{}
	this.Count = count
	this.Tactic = tactic
	this.TechniqueSummary = techniqueSummary
	return &this
}

// NewModelMitreAttackMatrixWithDefaults instantiates a new ModelMitreAttackMatrix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMitreAttackMatrixWithDefaults() *ModelMitreAttackMatrix {
	this := ModelMitreAttackMatrix{}
	return &this
}

// GetCount returns the Count field value
func (o *ModelMitreAttackMatrix) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ModelMitreAttackMatrix) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ModelMitreAttackMatrix) SetCount(v int32) {
	o.Count = v
}

// GetTactic returns the Tactic field value
func (o *ModelMitreAttackMatrix) GetTactic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tactic
}

// GetTacticOk returns a tuple with the Tactic field value
// and a boolean to check if the value has been set.
func (o *ModelMitreAttackMatrix) GetTacticOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tactic, true
}

// SetTactic sets field value
func (o *ModelMitreAttackMatrix) SetTactic(v string) {
	o.Tactic = v
}

// GetTechniqueSummary returns the TechniqueSummary field value
// If the value is explicit nil, the zero value for map[string]ModelMitreTechniqueSummary will be returned
func (o *ModelMitreAttackMatrix) GetTechniqueSummary() map[string]ModelMitreTechniqueSummary {
	if o == nil {
		var ret map[string]ModelMitreTechniqueSummary
		return ret
	}

	return o.TechniqueSummary
}

// GetTechniqueSummaryOk returns a tuple with the TechniqueSummary field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelMitreAttackMatrix) GetTechniqueSummaryOk() (*map[string]ModelMitreTechniqueSummary, bool) {
	if o == nil || IsNil(o.TechniqueSummary) {
		return nil, false
	}
	return &o.TechniqueSummary, true
}

// SetTechniqueSummary sets field value
func (o *ModelMitreAttackMatrix) SetTechniqueSummary(v map[string]ModelMitreTechniqueSummary) {
	o.TechniqueSummary = v
}

func (o ModelMitreAttackMatrix) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMitreAttackMatrix) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["tactic"] = o.Tactic
	if o.TechniqueSummary != nil {
		toSerialize["technique_summary"] = o.TechniqueSummary
	}
	return toSerialize, nil
}

func (o *ModelMitreAttackMatrix) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"tactic",
		"technique_summary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelMitreAttackMatrix := _ModelMitreAttackMatrix{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelMitreAttackMatrix)

	if err != nil {
		return err
	}

	*o = ModelMitreAttackMatrix(varModelMitreAttackMatrix)

	return err
}

type NullableModelMitreAttackMatrix struct {
	value *ModelMitreAttackMatrix
	isSet bool
}

func (v NullableModelMitreAttackMatrix) Get() *ModelMitreAttackMatrix {
	return v.value
}

func (v *NullableModelMitreAttackMatrix) Set(val *ModelMitreAttackMatrix) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMitreAttackMatrix) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMitreAttackMatrix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMitreAttackMatrix(val *ModelMitreAttackMatrix) *NullableModelMitreAttackMatrix {
	return &NullableModelMitreAttackMatrix{value: val, isSet: true}
}

func (v NullableModelMitreAttackMatrix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMitreAttackMatrix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


