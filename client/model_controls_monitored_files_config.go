/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ControlsMonitoredFilesConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsMonitoredFilesConfig{}

// ControlsMonitoredFilesConfig struct for ControlsMonitoredFilesConfig
type ControlsMonitoredFilesConfig struct {
	AccessTypes []string `json:"access_types"`
	Path string `json:"path"`
	Wight string `json:"wight"`
}

// NewControlsMonitoredFilesConfig instantiates a new ControlsMonitoredFilesConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsMonitoredFilesConfig(accessTypes []string, path string, wight string) *ControlsMonitoredFilesConfig {
	this := ControlsMonitoredFilesConfig{}
	this.AccessTypes = accessTypes
	this.Path = path
	this.Wight = wight
	return &this
}

// NewControlsMonitoredFilesConfigWithDefaults instantiates a new ControlsMonitoredFilesConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsMonitoredFilesConfigWithDefaults() *ControlsMonitoredFilesConfig {
	this := ControlsMonitoredFilesConfig{}
	return &this
}

// GetAccessTypes returns the AccessTypes field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ControlsMonitoredFilesConfig) GetAccessTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AccessTypes
}

// GetAccessTypesOk returns a tuple with the AccessTypes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsMonitoredFilesConfig) GetAccessTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessTypes) {
		return nil, false
	}
	return o.AccessTypes, true
}

// SetAccessTypes sets field value
func (o *ControlsMonitoredFilesConfig) SetAccessTypes(v []string) {
	o.AccessTypes = v
}

// GetPath returns the Path field value
func (o *ControlsMonitoredFilesConfig) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ControlsMonitoredFilesConfig) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ControlsMonitoredFilesConfig) SetPath(v string) {
	o.Path = v
}

// GetWight returns the Wight field value
func (o *ControlsMonitoredFilesConfig) GetWight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Wight
}

// GetWightOk returns a tuple with the Wight field value
// and a boolean to check if the value has been set.
func (o *ControlsMonitoredFilesConfig) GetWightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wight, true
}

// SetWight sets field value
func (o *ControlsMonitoredFilesConfig) SetWight(v string) {
	o.Wight = v
}

func (o ControlsMonitoredFilesConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsMonitoredFilesConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessTypes != nil {
		toSerialize["access_types"] = o.AccessTypes
	}
	toSerialize["path"] = o.Path
	toSerialize["wight"] = o.Wight
	return toSerialize, nil
}

type NullableControlsMonitoredFilesConfig struct {
	value *ControlsMonitoredFilesConfig
	isSet bool
}

func (v NullableControlsMonitoredFilesConfig) Get() *ControlsMonitoredFilesConfig {
	return v.value
}

func (v *NullableControlsMonitoredFilesConfig) Set(val *ControlsMonitoredFilesConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsMonitoredFilesConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsMonitoredFilesConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsMonitoredFilesConfig(val *ControlsMonitoredFilesConfig) *NullableControlsMonitoredFilesConfig {
	return &NullableControlsMonitoredFilesConfig{value: val, isSet: true}
}

func (v NullableControlsMonitoredFilesConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsMonitoredFilesConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


