/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the ControlsMonitoredFilesConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsMonitoredFilesConfig{}

// ControlsMonitoredFilesConfig struct for ControlsMonitoredFilesConfig
type ControlsMonitoredFilesConfig struct {
	Accesstypes []string `json:"accesstypes"`
	Recursive bool `json:"recursive"`
	Root string `json:"root"`
	Severity string `json:"severity"`
}

type _ControlsMonitoredFilesConfig ControlsMonitoredFilesConfig

// NewControlsMonitoredFilesConfig instantiates a new ControlsMonitoredFilesConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsMonitoredFilesConfig(accesstypes []string, recursive bool, root string, severity string) *ControlsMonitoredFilesConfig {
	this := ControlsMonitoredFilesConfig{}
	this.Accesstypes = accesstypes
	this.Recursive = recursive
	this.Root = root
	this.Severity = severity
	return &this
}

// NewControlsMonitoredFilesConfigWithDefaults instantiates a new ControlsMonitoredFilesConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsMonitoredFilesConfigWithDefaults() *ControlsMonitoredFilesConfig {
	this := ControlsMonitoredFilesConfig{}
	return &this
}

// GetAccesstypes returns the Accesstypes field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ControlsMonitoredFilesConfig) GetAccesstypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Accesstypes
}

// GetAccesstypesOk returns a tuple with the Accesstypes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsMonitoredFilesConfig) GetAccesstypesOk() ([]string, bool) {
	if o == nil || IsNil(o.Accesstypes) {
		return nil, false
	}
	return o.Accesstypes, true
}

// SetAccesstypes sets field value
func (o *ControlsMonitoredFilesConfig) SetAccesstypes(v []string) {
	o.Accesstypes = v
}

// GetRecursive returns the Recursive field value
func (o *ControlsMonitoredFilesConfig) GetRecursive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value
// and a boolean to check if the value has been set.
func (o *ControlsMonitoredFilesConfig) GetRecursiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recursive, true
}

// SetRecursive sets field value
func (o *ControlsMonitoredFilesConfig) SetRecursive(v bool) {
	o.Recursive = v
}

// GetRoot returns the Root field value
func (o *ControlsMonitoredFilesConfig) GetRoot() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Root
}

// GetRootOk returns a tuple with the Root field value
// and a boolean to check if the value has been set.
func (o *ControlsMonitoredFilesConfig) GetRootOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Root, true
}

// SetRoot sets field value
func (o *ControlsMonitoredFilesConfig) SetRoot(v string) {
	o.Root = v
}

// GetSeverity returns the Severity field value
func (o *ControlsMonitoredFilesConfig) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *ControlsMonitoredFilesConfig) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *ControlsMonitoredFilesConfig) SetSeverity(v string) {
	o.Severity = v
}

func (o ControlsMonitoredFilesConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsMonitoredFilesConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Accesstypes != nil {
		toSerialize["accesstypes"] = o.Accesstypes
	}
	toSerialize["recursive"] = o.Recursive
	toSerialize["root"] = o.Root
	toSerialize["severity"] = o.Severity
	return toSerialize, nil
}

func (o *ControlsMonitoredFilesConfig) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accesstypes",
		"recursive",
		"root",
		"severity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varControlsMonitoredFilesConfig := _ControlsMonitoredFilesConfig{}

	err = json.Unmarshal(bytes, &varControlsMonitoredFilesConfig)

	if err != nil {
		return err
	}

	*o = ControlsMonitoredFilesConfig(varControlsMonitoredFilesConfig)

	return err
}

type NullableControlsMonitoredFilesConfig struct {
	value *ControlsMonitoredFilesConfig
	isSet bool
}

func (v NullableControlsMonitoredFilesConfig) Get() *ControlsMonitoredFilesConfig {
	return v.value
}

func (v *NullableControlsMonitoredFilesConfig) Set(val *ControlsMonitoredFilesConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsMonitoredFilesConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsMonitoredFilesConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsMonitoredFilesConfig(val *ControlsMonitoredFilesConfig) *NullableControlsMonitoredFilesConfig {
	return &NullableControlsMonitoredFilesConfig{value: val, isSet: true}
}

func (v NullableControlsMonitoredFilesConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsMonitoredFilesConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


