/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ModelMitreTacticSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMitreTacticSummary{}

// ModelMitreTacticSummary struct for ModelMitreTacticSummary
type ModelMitreTacticSummary struct {
	Count int32 `json:"count"`
	TechniqueSummary map[string]ModelMitreTechniqueSummary `json:"technique_summary"`
}

// NewModelMitreTacticSummary instantiates a new ModelMitreTacticSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMitreTacticSummary(count int32, techniqueSummary map[string]ModelMitreTechniqueSummary) *ModelMitreTacticSummary {
	this := ModelMitreTacticSummary{}
	this.Count = count
	this.TechniqueSummary = techniqueSummary
	return &this
}

// NewModelMitreTacticSummaryWithDefaults instantiates a new ModelMitreTacticSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMitreTacticSummaryWithDefaults() *ModelMitreTacticSummary {
	this := ModelMitreTacticSummary{}
	return &this
}

// GetCount returns the Count field value
func (o *ModelMitreTacticSummary) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ModelMitreTacticSummary) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ModelMitreTacticSummary) SetCount(v int32) {
	o.Count = v
}

// GetTechniqueSummary returns the TechniqueSummary field value
// If the value is explicit nil, the zero value for map[string]ModelMitreTechniqueSummary will be returned
func (o *ModelMitreTacticSummary) GetTechniqueSummary() map[string]ModelMitreTechniqueSummary {
	if o == nil {
		var ret map[string]ModelMitreTechniqueSummary
		return ret
	}

	return o.TechniqueSummary
}

// GetTechniqueSummaryOk returns a tuple with the TechniqueSummary field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelMitreTacticSummary) GetTechniqueSummaryOk() (*map[string]ModelMitreTechniqueSummary, bool) {
	if o == nil || IsNil(o.TechniqueSummary) {
		return nil, false
	}
	return &o.TechniqueSummary, true
}

// SetTechniqueSummary sets field value
func (o *ModelMitreTacticSummary) SetTechniqueSummary(v map[string]ModelMitreTechniqueSummary) {
	o.TechniqueSummary = v
}

func (o ModelMitreTacticSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMitreTacticSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	if o.TechniqueSummary != nil {
		toSerialize["technique_summary"] = o.TechniqueSummary
	}
	return toSerialize, nil
}

type NullableModelMitreTacticSummary struct {
	value *ModelMitreTacticSummary
	isSet bool
}

func (v NullableModelMitreTacticSummary) Get() *ModelMitreTacticSummary {
	return v.value
}

func (v *NullableModelMitreTacticSummary) Set(val *ModelMitreTacticSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMitreTacticSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMitreTacticSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMitreTacticSummary(val *ModelMitreTacticSummary) *NullableModelMitreTacticSummary {
	return &NullableModelMitreTacticSummary{value: val, isSet: true}
}

func (v NullableModelMitreTacticSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMitreTacticSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


