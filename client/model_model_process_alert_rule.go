/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ModelProcessAlertRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelProcessAlertRule{}

// ModelProcessAlertRule struct for ModelProcessAlertRule
type ModelProcessAlertRule struct {
	Anomaly *string `json:"anomaly,omitempty"`
	Category *string `json:"category,omitempty"`
	EventType *string `json:"event_type,omitempty"`
	ResourceType *string `json:"resource_type,omitempty"`
	RuleId *string `json:"rule_id,omitempty"`
	Severity *string `json:"severity,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Tactics []string `json:"tactics,omitempty"`
	Techniques []string `json:"techniques,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewModelProcessAlertRule instantiates a new ModelProcessAlertRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelProcessAlertRule() *ModelProcessAlertRule {
	this := ModelProcessAlertRule{}
	return &this
}

// NewModelProcessAlertRuleWithDefaults instantiates a new ModelProcessAlertRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelProcessAlertRuleWithDefaults() *ModelProcessAlertRule {
	this := ModelProcessAlertRule{}
	return &this
}

// GetAnomaly returns the Anomaly field value if set, zero value otherwise.
func (o *ModelProcessAlertRule) GetAnomaly() string {
	if o == nil || IsNil(o.Anomaly) {
		var ret string
		return ret
	}
	return *o.Anomaly
}

// GetAnomalyOk returns a tuple with the Anomaly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelProcessAlertRule) GetAnomalyOk() (*string, bool) {
	if o == nil || IsNil(o.Anomaly) {
		return nil, false
	}
	return o.Anomaly, true
}

// HasAnomaly returns a boolean if a field has been set.
func (o *ModelProcessAlertRule) HasAnomaly() bool {
	if o != nil && !IsNil(o.Anomaly) {
		return true
	}

	return false
}

// SetAnomaly gets a reference to the given string and assigns it to the Anomaly field.
func (o *ModelProcessAlertRule) SetAnomaly(v string) {
	o.Anomaly = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ModelProcessAlertRule) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelProcessAlertRule) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ModelProcessAlertRule) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *ModelProcessAlertRule) SetCategory(v string) {
	o.Category = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *ModelProcessAlertRule) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelProcessAlertRule) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *ModelProcessAlertRule) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *ModelProcessAlertRule) SetEventType(v string) {
	o.EventType = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ModelProcessAlertRule) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelProcessAlertRule) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ModelProcessAlertRule) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *ModelProcessAlertRule) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *ModelProcessAlertRule) GetRuleId() string {
	if o == nil || IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelProcessAlertRule) GetRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *ModelProcessAlertRule) HasRuleId() bool {
	if o != nil && !IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *ModelProcessAlertRule) SetRuleId(v string) {
	o.RuleId = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *ModelProcessAlertRule) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelProcessAlertRule) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *ModelProcessAlertRule) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *ModelProcessAlertRule) SetSeverity(v string) {
	o.Severity = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ModelProcessAlertRule) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelProcessAlertRule) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ModelProcessAlertRule) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *ModelProcessAlertRule) SetSummary(v string) {
	o.Summary = &v
}

// GetTactics returns the Tactics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelProcessAlertRule) GetTactics() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tactics
}

// GetTacticsOk returns a tuple with the Tactics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelProcessAlertRule) GetTacticsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tactics) {
		return nil, false
	}
	return o.Tactics, true
}

// HasTactics returns a boolean if a field has been set.
func (o *ModelProcessAlertRule) HasTactics() bool {
	if o != nil && IsNil(o.Tactics) {
		return true
	}

	return false
}

// SetTactics gets a reference to the given []string and assigns it to the Tactics field.
func (o *ModelProcessAlertRule) SetTactics(v []string) {
	o.Tactics = v
}

// GetTechniques returns the Techniques field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelProcessAlertRule) GetTechniques() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Techniques
}

// GetTechniquesOk returns a tuple with the Techniques field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelProcessAlertRule) GetTechniquesOk() ([]string, bool) {
	if o == nil || IsNil(o.Techniques) {
		return nil, false
	}
	return o.Techniques, true
}

// HasTechniques returns a boolean if a field has been set.
func (o *ModelProcessAlertRule) HasTechniques() bool {
	if o != nil && IsNil(o.Techniques) {
		return true
	}

	return false
}

// SetTechniques gets a reference to the given []string and assigns it to the Techniques field.
func (o *ModelProcessAlertRule) SetTechniques(v []string) {
	o.Techniques = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ModelProcessAlertRule) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelProcessAlertRule) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ModelProcessAlertRule) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ModelProcessAlertRule) SetType(v string) {
	o.Type = &v
}

func (o ModelProcessAlertRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelProcessAlertRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Anomaly) {
		toSerialize["anomaly"] = o.Anomaly
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	if !IsNil(o.RuleId) {
		toSerialize["rule_id"] = o.RuleId
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if o.Tactics != nil {
		toSerialize["tactics"] = o.Tactics
	}
	if o.Techniques != nil {
		toSerialize["techniques"] = o.Techniques
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableModelProcessAlertRule struct {
	value *ModelProcessAlertRule
	isSet bool
}

func (v NullableModelProcessAlertRule) Get() *ModelProcessAlertRule {
	return v.value
}

func (v *NullableModelProcessAlertRule) Set(val *ModelProcessAlertRule) {
	v.value = val
	v.isSet = true
}

func (v NullableModelProcessAlertRule) IsSet() bool {
	return v.isSet
}

func (v *NullableModelProcessAlertRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelProcessAlertRule(val *ModelProcessAlertRule) *NullableModelProcessAlertRule {
	return &NullableModelProcessAlertRule{value: val, isSet: true}
}

func (v NullableModelProcessAlertRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelProcessAlertRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


