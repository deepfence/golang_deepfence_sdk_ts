/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ModelMitreAttackMatrixRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMitreAttackMatrixRequest{}

// ModelMitreAttackMatrixRequest struct for ModelMitreAttackMatrixRequest
type ModelMitreAttackMatrixRequest struct {
	NodeIds []string `json:"node_ids,omitempty"`
}

// NewModelMitreAttackMatrixRequest instantiates a new ModelMitreAttackMatrixRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMitreAttackMatrixRequest() *ModelMitreAttackMatrixRequest {
	this := ModelMitreAttackMatrixRequest{}
	return &this
}

// NewModelMitreAttackMatrixRequestWithDefaults instantiates a new ModelMitreAttackMatrixRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMitreAttackMatrixRequestWithDefaults() *ModelMitreAttackMatrixRequest {
	this := ModelMitreAttackMatrixRequest{}
	return &this
}

// GetNodeIds returns the NodeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelMitreAttackMatrixRequest) GetNodeIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NodeIds
}

// GetNodeIdsOk returns a tuple with the NodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelMitreAttackMatrixRequest) GetNodeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.NodeIds) {
		return nil, false
	}
	return o.NodeIds, true
}

// HasNodeIds returns a boolean if a field has been set.
func (o *ModelMitreAttackMatrixRequest) HasNodeIds() bool {
	if o != nil && IsNil(o.NodeIds) {
		return true
	}

	return false
}

// SetNodeIds gets a reference to the given []string and assigns it to the NodeIds field.
func (o *ModelMitreAttackMatrixRequest) SetNodeIds(v []string) {
	o.NodeIds = v
}

func (o ModelMitreAttackMatrixRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMitreAttackMatrixRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeIds != nil {
		toSerialize["node_ids"] = o.NodeIds
	}
	return toSerialize, nil
}

type NullableModelMitreAttackMatrixRequest struct {
	value *ModelMitreAttackMatrixRequest
	isSet bool
}

func (v NullableModelMitreAttackMatrixRequest) Get() *ModelMitreAttackMatrixRequest {
	return v.value
}

func (v *NullableModelMitreAttackMatrixRequest) Set(val *ModelMitreAttackMatrixRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMitreAttackMatrixRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMitreAttackMatrixRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMitreAttackMatrixRequest(val *ModelMitreAttackMatrixRequest) *NullableModelMitreAttackMatrixRequest {
	return &NullableModelMitreAttackMatrixRequest{value: val, isSet: true}
}

func (v NullableModelMitreAttackMatrixRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMitreAttackMatrixRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


