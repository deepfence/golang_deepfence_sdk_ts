/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v2.5.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelExploitableAlert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelExploitableAlert{}

// ModelExploitableAlert struct for ModelExploitableAlert
type ModelExploitableAlert struct {
	Node string `json:"node"`
	NodeId string `json:"node_id"`
	NodeType string `json:"node_type"`
	Process string `json:"process"`
	UpdatedAt int32 `json:"updated_at"`
}

type _ModelExploitableAlert ModelExploitableAlert

// NewModelExploitableAlert instantiates a new ModelExploitableAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelExploitableAlert(node string, nodeId string, nodeType string, process string, updatedAt int32) *ModelExploitableAlert {
	this := ModelExploitableAlert{}
	this.Node = node
	this.NodeId = nodeId
	this.NodeType = nodeType
	this.Process = process
	this.UpdatedAt = updatedAt
	return &this
}

// NewModelExploitableAlertWithDefaults instantiates a new ModelExploitableAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelExploitableAlertWithDefaults() *ModelExploitableAlert {
	this := ModelExploitableAlert{}
	return &this
}

// GetNode returns the Node field value
func (o *ModelExploitableAlert) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *ModelExploitableAlert) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *ModelExploitableAlert) SetNode(v string) {
	o.Node = v
}

// GetNodeId returns the NodeId field value
func (o *ModelExploitableAlert) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *ModelExploitableAlert) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *ModelExploitableAlert) SetNodeId(v string) {
	o.NodeId = v
}

// GetNodeType returns the NodeType field value
func (o *ModelExploitableAlert) GetNodeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value
// and a boolean to check if the value has been set.
func (o *ModelExploitableAlert) GetNodeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeType, true
}

// SetNodeType sets field value
func (o *ModelExploitableAlert) SetNodeType(v string) {
	o.NodeType = v
}

// GetProcess returns the Process field value
func (o *ModelExploitableAlert) GetProcess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Process
}

// GetProcessOk returns a tuple with the Process field value
// and a boolean to check if the value has been set.
func (o *ModelExploitableAlert) GetProcessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Process, true
}

// SetProcess sets field value
func (o *ModelExploitableAlert) SetProcess(v string) {
	o.Process = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ModelExploitableAlert) GetUpdatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ModelExploitableAlert) GetUpdatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ModelExploitableAlert) SetUpdatedAt(v int32) {
	o.UpdatedAt = v
}

func (o ModelExploitableAlert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelExploitableAlert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["node"] = o.Node
	toSerialize["node_id"] = o.NodeId
	toSerialize["node_type"] = o.NodeType
	toSerialize["process"] = o.Process
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *ModelExploitableAlert) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"node",
		"node_id",
		"node_type",
		"process",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelExploitableAlert := _ModelExploitableAlert{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelExploitableAlert)

	if err != nil {
		return err
	}

	*o = ModelExploitableAlert(varModelExploitableAlert)

	return err
}

type NullableModelExploitableAlert struct {
	value *ModelExploitableAlert
	isSet bool
}

func (v NullableModelExploitableAlert) Get() *ModelExploitableAlert {
	return v.value
}

func (v *NullableModelExploitableAlert) Set(val *ModelExploitableAlert) {
	v.value = val
	v.isSet = true
}

func (v NullableModelExploitableAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableModelExploitableAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelExploitableAlert(val *ModelExploitableAlert) *NullableModelExploitableAlert {
	return &NullableModelExploitableAlert{value: val, isSet: true}
}

func (v NullableModelExploitableAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelExploitableAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


