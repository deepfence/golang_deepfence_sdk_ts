/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v3.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SinglesignonGetSingleSignOnResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SinglesignonGetSingleSignOnResponse{}

// SinglesignonGetSingleSignOnResponse struct for SinglesignonGetSingleSignOnResponse
type SinglesignonGetSingleSignOnResponse struct {
	Config []SinglesignonSSOResponse `json:"config"`
	Instructions SinglesignonSSOConfigurationInstructions `json:"instructions"`
}

type _SinglesignonGetSingleSignOnResponse SinglesignonGetSingleSignOnResponse

// NewSinglesignonGetSingleSignOnResponse instantiates a new SinglesignonGetSingleSignOnResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSinglesignonGetSingleSignOnResponse(config []SinglesignonSSOResponse, instructions SinglesignonSSOConfigurationInstructions) *SinglesignonGetSingleSignOnResponse {
	this := SinglesignonGetSingleSignOnResponse{}
	this.Config = config
	this.Instructions = instructions
	return &this
}

// NewSinglesignonGetSingleSignOnResponseWithDefaults instantiates a new SinglesignonGetSingleSignOnResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSinglesignonGetSingleSignOnResponseWithDefaults() *SinglesignonGetSingleSignOnResponse {
	this := SinglesignonGetSingleSignOnResponse{}
	return &this
}

// GetConfig returns the Config field value
// If the value is explicit nil, the zero value for []SinglesignonSSOResponse will be returned
func (o *SinglesignonGetSingleSignOnResponse) GetConfig() []SinglesignonSSOResponse {
	if o == nil {
		var ret []SinglesignonSSOResponse
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SinglesignonGetSingleSignOnResponse) GetConfigOk() ([]SinglesignonSSOResponse, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// SetConfig sets field value
func (o *SinglesignonGetSingleSignOnResponse) SetConfig(v []SinglesignonSSOResponse) {
	o.Config = v
}

// GetInstructions returns the Instructions field value
func (o *SinglesignonGetSingleSignOnResponse) GetInstructions() SinglesignonSSOConfigurationInstructions {
	if o == nil {
		var ret SinglesignonSSOConfigurationInstructions
		return ret
	}

	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value
// and a boolean to check if the value has been set.
func (o *SinglesignonGetSingleSignOnResponse) GetInstructionsOk() (*SinglesignonSSOConfigurationInstructions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instructions, true
}

// SetInstructions sets field value
func (o *SinglesignonGetSingleSignOnResponse) SetInstructions(v SinglesignonSSOConfigurationInstructions) {
	o.Instructions = v
}

func (o SinglesignonGetSingleSignOnResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SinglesignonGetSingleSignOnResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	toSerialize["instructions"] = o.Instructions
	return toSerialize, nil
}

func (o *SinglesignonGetSingleSignOnResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
		"instructions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSinglesignonGetSingleSignOnResponse := _SinglesignonGetSingleSignOnResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSinglesignonGetSingleSignOnResponse)

	if err != nil {
		return err
	}

	*o = SinglesignonGetSingleSignOnResponse(varSinglesignonGetSingleSignOnResponse)

	return err
}

type NullableSinglesignonGetSingleSignOnResponse struct {
	value *SinglesignonGetSingleSignOnResponse
	isSet bool
}

func (v NullableSinglesignonGetSingleSignOnResponse) Get() *SinglesignonGetSingleSignOnResponse {
	return v.value
}

func (v *NullableSinglesignonGetSingleSignOnResponse) Set(val *SinglesignonGetSingleSignOnResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSinglesignonGetSingleSignOnResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSinglesignonGetSingleSignOnResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinglesignonGetSingleSignOnResponse(val *SinglesignonGetSingleSignOnResponse) *NullableSinglesignonGetSingleSignOnResponse {
	return &NullableSinglesignonGetSingleSignOnResponse{value: val, isSet: true}
}

func (v NullableSinglesignonGetSingleSignOnResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinglesignonGetSingleSignOnResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


