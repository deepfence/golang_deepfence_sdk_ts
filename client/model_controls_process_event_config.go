/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ControlsProcessEventConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsProcessEventConfig{}

// ControlsProcessEventConfig struct for ControlsProcessEventConfig
type ControlsProcessEventConfig struct {
	EventName string `json:"event_name"`
	Wight string `json:"wight"`
}

// NewControlsProcessEventConfig instantiates a new ControlsProcessEventConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsProcessEventConfig(eventName string, wight string) *ControlsProcessEventConfig {
	this := ControlsProcessEventConfig{}
	this.EventName = eventName
	this.Wight = wight
	return &this
}

// NewControlsProcessEventConfigWithDefaults instantiates a new ControlsProcessEventConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsProcessEventConfigWithDefaults() *ControlsProcessEventConfig {
	this := ControlsProcessEventConfig{}
	return &this
}

// GetEventName returns the EventName field value
func (o *ControlsProcessEventConfig) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *ControlsProcessEventConfig) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *ControlsProcessEventConfig) SetEventName(v string) {
	o.EventName = v
}

// GetWight returns the Wight field value
func (o *ControlsProcessEventConfig) GetWight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Wight
}

// GetWightOk returns a tuple with the Wight field value
// and a boolean to check if the value has been set.
func (o *ControlsProcessEventConfig) GetWightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wight, true
}

// SetWight sets field value
func (o *ControlsProcessEventConfig) SetWight(v string) {
	o.Wight = v
}

func (o ControlsProcessEventConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsProcessEventConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_name"] = o.EventName
	toSerialize["wight"] = o.Wight
	return toSerialize, nil
}

type NullableControlsProcessEventConfig struct {
	value *ControlsProcessEventConfig
	isSet bool
}

func (v NullableControlsProcessEventConfig) Get() *ControlsProcessEventConfig {
	return v.value
}

func (v *NullableControlsProcessEventConfig) Set(val *ControlsProcessEventConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsProcessEventConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsProcessEventConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsProcessEventConfig(val *ControlsProcessEventConfig) *NullableControlsProcessEventConfig {
	return &NullableControlsProcessEventConfig{value: val, isSet: true}
}

func (v NullableControlsProcessEventConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsProcessEventConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


