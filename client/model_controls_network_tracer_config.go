/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ControlsNetworkTracerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsNetworkTracerConfig{}

// ControlsNetworkTracerConfig struct for ControlsNetworkTracerConfig
type ControlsNetworkTracerConfig struct {
	Hash string `json:"hash"`
	HttpRules ControlsNetworkRules `json:"http_rules"`
	HttpsRules ControlsNetworkRules `json:"https_rules"`
	Name string `json:"name"`
	TcpRules ControlsNetworkRules `json:"tcp_rules"`
}

// NewControlsNetworkTracerConfig instantiates a new ControlsNetworkTracerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsNetworkTracerConfig(hash string, httpRules ControlsNetworkRules, httpsRules ControlsNetworkRules, name string, tcpRules ControlsNetworkRules) *ControlsNetworkTracerConfig {
	this := ControlsNetworkTracerConfig{}
	this.Hash = hash
	this.HttpRules = httpRules
	this.HttpsRules = httpsRules
	this.Name = name
	this.TcpRules = tcpRules
	return &this
}

// NewControlsNetworkTracerConfigWithDefaults instantiates a new ControlsNetworkTracerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsNetworkTracerConfigWithDefaults() *ControlsNetworkTracerConfig {
	this := ControlsNetworkTracerConfig{}
	return &this
}

// GetHash returns the Hash field value
func (o *ControlsNetworkTracerConfig) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *ControlsNetworkTracerConfig) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *ControlsNetworkTracerConfig) SetHash(v string) {
	o.Hash = v
}

// GetHttpRules returns the HttpRules field value
func (o *ControlsNetworkTracerConfig) GetHttpRules() ControlsNetworkRules {
	if o == nil {
		var ret ControlsNetworkRules
		return ret
	}

	return o.HttpRules
}

// GetHttpRulesOk returns a tuple with the HttpRules field value
// and a boolean to check if the value has been set.
func (o *ControlsNetworkTracerConfig) GetHttpRulesOk() (*ControlsNetworkRules, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpRules, true
}

// SetHttpRules sets field value
func (o *ControlsNetworkTracerConfig) SetHttpRules(v ControlsNetworkRules) {
	o.HttpRules = v
}

// GetHttpsRules returns the HttpsRules field value
func (o *ControlsNetworkTracerConfig) GetHttpsRules() ControlsNetworkRules {
	if o == nil {
		var ret ControlsNetworkRules
		return ret
	}

	return o.HttpsRules
}

// GetHttpsRulesOk returns a tuple with the HttpsRules field value
// and a boolean to check if the value has been set.
func (o *ControlsNetworkTracerConfig) GetHttpsRulesOk() (*ControlsNetworkRules, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpsRules, true
}

// SetHttpsRules sets field value
func (o *ControlsNetworkTracerConfig) SetHttpsRules(v ControlsNetworkRules) {
	o.HttpsRules = v
}

// GetName returns the Name field value
func (o *ControlsNetworkTracerConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ControlsNetworkTracerConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ControlsNetworkTracerConfig) SetName(v string) {
	o.Name = v
}

// GetTcpRules returns the TcpRules field value
func (o *ControlsNetworkTracerConfig) GetTcpRules() ControlsNetworkRules {
	if o == nil {
		var ret ControlsNetworkRules
		return ret
	}

	return o.TcpRules
}

// GetTcpRulesOk returns a tuple with the TcpRules field value
// and a boolean to check if the value has been set.
func (o *ControlsNetworkTracerConfig) GetTcpRulesOk() (*ControlsNetworkRules, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TcpRules, true
}

// SetTcpRules sets field value
func (o *ControlsNetworkTracerConfig) SetTcpRules(v ControlsNetworkRules) {
	o.TcpRules = v
}

func (o ControlsNetworkTracerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsNetworkTracerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	toSerialize["http_rules"] = o.HttpRules
	toSerialize["https_rules"] = o.HttpsRules
	toSerialize["name"] = o.Name
	toSerialize["tcp_rules"] = o.TcpRules
	return toSerialize, nil
}

type NullableControlsNetworkTracerConfig struct {
	value *ControlsNetworkTracerConfig
	isSet bool
}

func (v NullableControlsNetworkTracerConfig) Get() *ControlsNetworkTracerConfig {
	return v.value
}

func (v *NullableControlsNetworkTracerConfig) Set(val *ControlsNetworkTracerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsNetworkTracerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsNetworkTracerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsNetworkTracerConfig(val *ControlsNetworkTracerConfig) *NullableControlsNetworkTracerConfig {
	return &NullableControlsNetworkTracerConfig{value: val, isSet: true}
}

func (v NullableControlsNetworkTracerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsNetworkTracerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


