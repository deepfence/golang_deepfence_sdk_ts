/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v2.3.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ControlsNetworkTracerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsNetworkTracerConfig{}

// ControlsNetworkTracerConfig struct for ControlsNetworkTracerConfig
type ControlsNetworkTracerConfig struct {
	HttpRules ControlsNetworkRules `json:"http_rules"`
	HttpsRules ControlsNetworkRules `json:"https_rules"`
	IgnoredRuleIds []string `json:"ignored_rule_ids,omitempty"`
	Mode string `json:"mode"`
	NodeId string `json:"node_id"`
	ProcessNames []string `json:"process_names"`
	TcpRules ControlsNetworkRules `json:"tcp_rules"`
	UpdatedAt int32 `json:"updated_at"`
}

type _ControlsNetworkTracerConfig ControlsNetworkTracerConfig

// NewControlsNetworkTracerConfig instantiates a new ControlsNetworkTracerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsNetworkTracerConfig(httpRules ControlsNetworkRules, httpsRules ControlsNetworkRules, mode string, nodeId string, processNames []string, tcpRules ControlsNetworkRules, updatedAt int32) *ControlsNetworkTracerConfig {
	this := ControlsNetworkTracerConfig{}
	this.HttpRules = httpRules
	this.HttpsRules = httpsRules
	this.Mode = mode
	this.NodeId = nodeId
	this.ProcessNames = processNames
	this.TcpRules = tcpRules
	this.UpdatedAt = updatedAt
	return &this
}

// NewControlsNetworkTracerConfigWithDefaults instantiates a new ControlsNetworkTracerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsNetworkTracerConfigWithDefaults() *ControlsNetworkTracerConfig {
	this := ControlsNetworkTracerConfig{}
	return &this
}

// GetHttpRules returns the HttpRules field value
func (o *ControlsNetworkTracerConfig) GetHttpRules() ControlsNetworkRules {
	if o == nil {
		var ret ControlsNetworkRules
		return ret
	}

	return o.HttpRules
}

// GetHttpRulesOk returns a tuple with the HttpRules field value
// and a boolean to check if the value has been set.
func (o *ControlsNetworkTracerConfig) GetHttpRulesOk() (*ControlsNetworkRules, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpRules, true
}

// SetHttpRules sets field value
func (o *ControlsNetworkTracerConfig) SetHttpRules(v ControlsNetworkRules) {
	o.HttpRules = v
}

// GetHttpsRules returns the HttpsRules field value
func (o *ControlsNetworkTracerConfig) GetHttpsRules() ControlsNetworkRules {
	if o == nil {
		var ret ControlsNetworkRules
		return ret
	}

	return o.HttpsRules
}

// GetHttpsRulesOk returns a tuple with the HttpsRules field value
// and a boolean to check if the value has been set.
func (o *ControlsNetworkTracerConfig) GetHttpsRulesOk() (*ControlsNetworkRules, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpsRules, true
}

// SetHttpsRules sets field value
func (o *ControlsNetworkTracerConfig) SetHttpsRules(v ControlsNetworkRules) {
	o.HttpsRules = v
}

// GetIgnoredRuleIds returns the IgnoredRuleIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ControlsNetworkTracerConfig) GetIgnoredRuleIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IgnoredRuleIds
}

// GetIgnoredRuleIdsOk returns a tuple with the IgnoredRuleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsNetworkTracerConfig) GetIgnoredRuleIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredRuleIds) {
		return nil, false
	}
	return o.IgnoredRuleIds, true
}

// HasIgnoredRuleIds returns a boolean if a field has been set.
func (o *ControlsNetworkTracerConfig) HasIgnoredRuleIds() bool {
	if o != nil && !IsNil(o.IgnoredRuleIds) {
		return true
	}

	return false
}

// SetIgnoredRuleIds gets a reference to the given []string and assigns it to the IgnoredRuleIds field.
func (o *ControlsNetworkTracerConfig) SetIgnoredRuleIds(v []string) {
	o.IgnoredRuleIds = v
}

// GetMode returns the Mode field value
func (o *ControlsNetworkTracerConfig) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *ControlsNetworkTracerConfig) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *ControlsNetworkTracerConfig) SetMode(v string) {
	o.Mode = v
}

// GetNodeId returns the NodeId field value
func (o *ControlsNetworkTracerConfig) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *ControlsNetworkTracerConfig) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *ControlsNetworkTracerConfig) SetNodeId(v string) {
	o.NodeId = v
}

// GetProcessNames returns the ProcessNames field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ControlsNetworkTracerConfig) GetProcessNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ProcessNames
}

// GetProcessNamesOk returns a tuple with the ProcessNames field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControlsNetworkTracerConfig) GetProcessNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessNames) {
		return nil, false
	}
	return o.ProcessNames, true
}

// SetProcessNames sets field value
func (o *ControlsNetworkTracerConfig) SetProcessNames(v []string) {
	o.ProcessNames = v
}

// GetTcpRules returns the TcpRules field value
func (o *ControlsNetworkTracerConfig) GetTcpRules() ControlsNetworkRules {
	if o == nil {
		var ret ControlsNetworkRules
		return ret
	}

	return o.TcpRules
}

// GetTcpRulesOk returns a tuple with the TcpRules field value
// and a boolean to check if the value has been set.
func (o *ControlsNetworkTracerConfig) GetTcpRulesOk() (*ControlsNetworkRules, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TcpRules, true
}

// SetTcpRules sets field value
func (o *ControlsNetworkTracerConfig) SetTcpRules(v ControlsNetworkRules) {
	o.TcpRules = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ControlsNetworkTracerConfig) GetUpdatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ControlsNetworkTracerConfig) GetUpdatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ControlsNetworkTracerConfig) SetUpdatedAt(v int32) {
	o.UpdatedAt = v
}

func (o ControlsNetworkTracerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsNetworkTracerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["http_rules"] = o.HttpRules
	toSerialize["https_rules"] = o.HttpsRules
	if o.IgnoredRuleIds != nil {
		toSerialize["ignored_rule_ids"] = o.IgnoredRuleIds
	}
	toSerialize["mode"] = o.Mode
	toSerialize["node_id"] = o.NodeId
	if o.ProcessNames != nil {
		toSerialize["process_names"] = o.ProcessNames
	}
	toSerialize["tcp_rules"] = o.TcpRules
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *ControlsNetworkTracerConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"http_rules",
		"https_rules",
		"mode",
		"node_id",
		"process_names",
		"tcp_rules",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varControlsNetworkTracerConfig := _ControlsNetworkTracerConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varControlsNetworkTracerConfig)

	if err != nil {
		return err
	}

	*o = ControlsNetworkTracerConfig(varControlsNetworkTracerConfig)

	return err
}

type NullableControlsNetworkTracerConfig struct {
	value *ControlsNetworkTracerConfig
	isSet bool
}

func (v NullableControlsNetworkTracerConfig) Get() *ControlsNetworkTracerConfig {
	return v.value
}

func (v *NullableControlsNetworkTracerConfig) Set(val *ControlsNetworkTracerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsNetworkTracerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsNetworkTracerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsNetworkTracerConfig(val *ControlsNetworkTracerConfig) *NullableControlsNetworkTracerConfig {
	return &NullableControlsNetworkTracerConfig{value: val, isSet: true}
}

func (v NullableControlsNetworkTracerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsNetworkTracerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


