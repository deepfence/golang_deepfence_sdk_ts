/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v3.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UtilsRegistryCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtilsRegistryCredentials{}

// UtilsRegistryCredentials struct for UtilsRegistryCredentials
type UtilsRegistryCredentials struct {
	Password *string `json:"password,omitempty"`
	RegistryUrl *string `json:"registry_url,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewUtilsRegistryCredentials instantiates a new UtilsRegistryCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilsRegistryCredentials() *UtilsRegistryCredentials {
	this := UtilsRegistryCredentials{}
	return &this
}

// NewUtilsRegistryCredentialsWithDefaults instantiates a new UtilsRegistryCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilsRegistryCredentialsWithDefaults() *UtilsRegistryCredentials {
	this := UtilsRegistryCredentials{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UtilsRegistryCredentials) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsRegistryCredentials) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UtilsRegistryCredentials) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UtilsRegistryCredentials) SetPassword(v string) {
	o.Password = &v
}

// GetRegistryUrl returns the RegistryUrl field value if set, zero value otherwise.
func (o *UtilsRegistryCredentials) GetRegistryUrl() string {
	if o == nil || IsNil(o.RegistryUrl) {
		var ret string
		return ret
	}
	return *o.RegistryUrl
}

// GetRegistryUrlOk returns a tuple with the RegistryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsRegistryCredentials) GetRegistryUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RegistryUrl) {
		return nil, false
	}
	return o.RegistryUrl, true
}

// HasRegistryUrl returns a boolean if a field has been set.
func (o *UtilsRegistryCredentials) HasRegistryUrl() bool {
	if o != nil && !IsNil(o.RegistryUrl) {
		return true
	}

	return false
}

// SetRegistryUrl gets a reference to the given string and assigns it to the RegistryUrl field.
func (o *UtilsRegistryCredentials) SetRegistryUrl(v string) {
	o.RegistryUrl = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UtilsRegistryCredentials) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsRegistryCredentials) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UtilsRegistryCredentials) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UtilsRegistryCredentials) SetUsername(v string) {
	o.Username = &v
}

func (o UtilsRegistryCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtilsRegistryCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.RegistryUrl) {
		toSerialize["registry_url"] = o.RegistryUrl
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableUtilsRegistryCredentials struct {
	value *UtilsRegistryCredentials
	isSet bool
}

func (v NullableUtilsRegistryCredentials) Get() *UtilsRegistryCredentials {
	return v.value
}

func (v *NullableUtilsRegistryCredentials) Set(val *UtilsRegistryCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilsRegistryCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilsRegistryCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilsRegistryCredentials(val *UtilsRegistryCredentials) *NullableUtilsRegistryCredentials {
	return &NullableUtilsRegistryCredentials{value: val, isSet: true}
}

func (v NullableUtilsRegistryCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilsRegistryCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


