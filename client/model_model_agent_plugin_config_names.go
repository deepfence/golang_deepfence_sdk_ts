/*
Deepfence ThreatStryker

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.2.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelAgentPluginConfigNames type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelAgentPluginConfigNames{}

// ModelAgentPluginConfigNames struct for ModelAgentPluginConfigNames
type ModelAgentPluginConfigNames struct {
	FilesystemConfigName string `json:"filesystem_config_name"`
	NetworkConfigName string `json:"network_config_name"`
	PolicyConfigName string `json:"policy_config_name"`
	ProcessConfigName string `json:"process_config_name"`
}

type _ModelAgentPluginConfigNames ModelAgentPluginConfigNames

// NewModelAgentPluginConfigNames instantiates a new ModelAgentPluginConfigNames object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAgentPluginConfigNames(filesystemConfigName string, networkConfigName string, policyConfigName string, processConfigName string) *ModelAgentPluginConfigNames {
	this := ModelAgentPluginConfigNames{}
	this.FilesystemConfigName = filesystemConfigName
	this.NetworkConfigName = networkConfigName
	this.PolicyConfigName = policyConfigName
	this.ProcessConfigName = processConfigName
	return &this
}

// NewModelAgentPluginConfigNamesWithDefaults instantiates a new ModelAgentPluginConfigNames object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAgentPluginConfigNamesWithDefaults() *ModelAgentPluginConfigNames {
	this := ModelAgentPluginConfigNames{}
	return &this
}

// GetFilesystemConfigName returns the FilesystemConfigName field value
func (o *ModelAgentPluginConfigNames) GetFilesystemConfigName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilesystemConfigName
}

// GetFilesystemConfigNameOk returns a tuple with the FilesystemConfigName field value
// and a boolean to check if the value has been set.
func (o *ModelAgentPluginConfigNames) GetFilesystemConfigNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilesystemConfigName, true
}

// SetFilesystemConfigName sets field value
func (o *ModelAgentPluginConfigNames) SetFilesystemConfigName(v string) {
	o.FilesystemConfigName = v
}

// GetNetworkConfigName returns the NetworkConfigName field value
func (o *ModelAgentPluginConfigNames) GetNetworkConfigName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkConfigName
}

// GetNetworkConfigNameOk returns a tuple with the NetworkConfigName field value
// and a boolean to check if the value has been set.
func (o *ModelAgentPluginConfigNames) GetNetworkConfigNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkConfigName, true
}

// SetNetworkConfigName sets field value
func (o *ModelAgentPluginConfigNames) SetNetworkConfigName(v string) {
	o.NetworkConfigName = v
}

// GetPolicyConfigName returns the PolicyConfigName field value
func (o *ModelAgentPluginConfigNames) GetPolicyConfigName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyConfigName
}

// GetPolicyConfigNameOk returns a tuple with the PolicyConfigName field value
// and a boolean to check if the value has been set.
func (o *ModelAgentPluginConfigNames) GetPolicyConfigNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyConfigName, true
}

// SetPolicyConfigName sets field value
func (o *ModelAgentPluginConfigNames) SetPolicyConfigName(v string) {
	o.PolicyConfigName = v
}

// GetProcessConfigName returns the ProcessConfigName field value
func (o *ModelAgentPluginConfigNames) GetProcessConfigName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessConfigName
}

// GetProcessConfigNameOk returns a tuple with the ProcessConfigName field value
// and a boolean to check if the value has been set.
func (o *ModelAgentPluginConfigNames) GetProcessConfigNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessConfigName, true
}

// SetProcessConfigName sets field value
func (o *ModelAgentPluginConfigNames) SetProcessConfigName(v string) {
	o.ProcessConfigName = v
}

func (o ModelAgentPluginConfigNames) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelAgentPluginConfigNames) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filesystem_config_name"] = o.FilesystemConfigName
	toSerialize["network_config_name"] = o.NetworkConfigName
	toSerialize["policy_config_name"] = o.PolicyConfigName
	toSerialize["process_config_name"] = o.ProcessConfigName
	return toSerialize, nil
}

func (o *ModelAgentPluginConfigNames) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filesystem_config_name",
		"network_config_name",
		"policy_config_name",
		"process_config_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelAgentPluginConfigNames := _ModelAgentPluginConfigNames{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelAgentPluginConfigNames)

	if err != nil {
		return err
	}

	*o = ModelAgentPluginConfigNames(varModelAgentPluginConfigNames)

	return err
}

type NullableModelAgentPluginConfigNames struct {
	value *ModelAgentPluginConfigNames
	isSet bool
}

func (v NullableModelAgentPluginConfigNames) Get() *ModelAgentPluginConfigNames {
	return v.value
}

func (v *NullableModelAgentPluginConfigNames) Set(val *ModelAgentPluginConfigNames) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAgentPluginConfigNames) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAgentPluginConfigNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAgentPluginConfigNames(val *ModelAgentPluginConfigNames) *NullableModelAgentPluginConfigNames {
	return &NullableModelAgentPluginConfigNames{value: val, isSet: true}
}

func (v NullableModelAgentPluginConfigNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAgentPluginConfigNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


